// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn reg_fn(_1: S) -> () {
    debug _s => const S(A);
    let mut _0: ();

    bb0: {
        return;
    }
}

fn gen_spec_t(_1: SGen<A>) -> () {
    debug _s => const SGen::<A>(A);
    let mut _0: ();

    bb0: {
        return;
    }
}

fn gen_spec_i32(_1: SGen<i32>) -> () {
    debug _s => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn generic(_1: SGen<T>) -> () {
    debug _s => _1;
    let mut _0: ();

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let mut _4: SGen<i32>;
    let _5: ();
    let mut _6: SGen<char>;
    let _7: ();
    let mut _8: SGen<char>;

    bb0: {
        _1 = reg_fn(const S(A)) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = gen_spec_t(const SGen::<A>(A)) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = SGen::<i32>(const 6_i32);
        _3 = gen_spec_i32(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = SGen::<char>(const 'a');
        _5 = generic::<char>(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = SGen::<char>(const 'c');
        _7 = generic::<char>(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn S(_1: A) -> S {
    let mut _0: S;

    bb0: {
        _0 = S(move _1);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: A) -> S {
    let mut _0: S;

    bb0: {
        _0 = S(move _1);
        return;
    }
}

fn SGen(_1: T) -> SGen<T> {
    let mut _0: SGen<T>;

    bb0: {
        _0 = SGen::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn SGen(_1: T) -> SGen<T> {
    let mut _0: SGen<T>;

    bb0: {
        _0 = SGen::<T>(move _1);
        return;
    }
}
