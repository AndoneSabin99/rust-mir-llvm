// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::sync::Arc<&str>;
    let mut _2: std::ops::Range<i32>;
    let mut _3: std::ops::Range<i32>;
    let mut _5: std::option::Option<i32>;
    let mut _6: &mut std::ops::Range<i32>;
    let mut _7: isize;
    let _9: &std::sync::Arc<&str>;
    let mut _11: [closure@arc.rs:12:33: 12:40];
    let _12: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _13: std::thread::JoinHandle<()>;
    scope 1 {
        debug apple => _1;
        let mut _4: std::ops::Range<i32>;
        scope 2 {
            debug iter => _4;
            let _8: std::sync::Arc<&str>;
            scope 3 {
                debug apple => _8;
                let _10: std::thread::JoinHandle<()>;
                scope 4 {
                    debug tjh => _10;
                }
            }
        }
    }

    bb0: {
        _1 = Arc::<&str>::new(const "the same apple") -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = std::ops::Range::<i32> { start: const 0_i32, end: const 10_i32 };
        _2 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _3) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _4 = move _2;
        goto -> bb3;
    }

    bb3: {
        _6 = &mut _4;
        _5 = <std::ops::Range<i32> as Iterator>::next(_6) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _9 = &_1;
        _8 = <Arc<&str> as Clone>::clone(_9) -> [return: bb8, unwind: bb12];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        drop(_1) -> [return: bb11, unwind continue];
    }

    bb8: {
        _11 = [closure@arc.rs:12:33: 12:40] { apple: move _8 };
        _10 = spawn::<[closure@arc.rs:12:33: 12:40], ()>(move _11) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        _13 = move _10;
        _12 = JoinHandle::<()>::join(move _13) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        drop(_12) -> [return: bb3, unwind: bb12];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: [closure@arc.rs:12:33: 12:40]) -> () {
    debug apple => (_1.0: std::sync::Arc<&str>);
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::sync::Arc<&str>;
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &usize;
    let _18: usize;
    let _19: &std::sync::Arc<&str>;
    let mut _20: &[&str; 2];
    let mut _21: &[&str; 2];

    bb0: {
        _21 = const _;
        _4 = _21 as &[&str] (PointerCoercion(Unsize));
        _9 = &(_1.0: std::sync::Arc<&str>);
        _8 = core::fmt::rt::Argument::<'_>::new_debug::<Arc<&str>>(_9) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _20 = const _;
        _12 = _20 as &[&str] (PointerCoercion(Unsize));
        _19 = &(_1.0: std::sync::Arc<&str>);
        _18 = Arc::<&str>::strong_count(_19) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _17 = &_18;
        _16 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_17) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _10 = _print(move _11) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        drop(_1) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "count after creating apple in a thread: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
