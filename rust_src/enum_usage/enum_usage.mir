// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: IpAddrKind;
    let mut _4: std::string::String;
    scope 1 {
        debug _four => _1;
        let _2: IpAddrKind;
        scope 2 {
            debug _six => _2;
            let _3: IpAddr;
            scope 3 {
                debug loopback => _3;
                let _5: IpAddr;
                scope 4 {
                    debug home => _5;
                }
            }
        }
    }

    bb0: {
        _1 = IpAddrKind::V4;
        _2 = IpAddrKind::V6;
        _4 = <String as From<&str>>::from(const "::1") -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = IpAddr::V6(move _4);
        _5 = IpAddr::V4(const 127_i32, const 0_i32, const 0_i32, const 1_i32);
        drop(_5) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_3) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn IpAddr::V4(_1: i32, _2: i32, _3: i32, _4: i32) -> IpAddr {
    let mut _0: IpAddr;

    bb0: {
        _0 = IpAddr::V4(move _1, move _2, move _3, move _4);
        return;
    }
}

// MIR FOR CTFE
fn IpAddr::V4(_1: i32, _2: i32, _3: i32, _4: i32) -> IpAddr {
    let mut _0: IpAddr;

    bb0: {
        _0 = IpAddr::V4(move _1, move _2, move _3, move _4);
        return;
    }
}

fn IpAddr::V6(_1: String) -> IpAddr {
    let mut _0: IpAddr;

    bb0: {
        _0 = IpAddr::V6(move _1);
        return;
    }
}

// MIR FOR CTFE
fn IpAddr::V6(_1: String) -> IpAddr {
    let mut _0: IpAddr;

    bb0: {
        _0 = IpAddr::V6(move _1);
        return;
    }
}

fn IpAddr::V0() -> IpAddr {
    let mut _0: IpAddr;

    bb0: {
        _0 = IpAddr::V0;
        return;
    }
}

// MIR FOR CTFE
fn IpAddr::V0() -> IpAddr {
    let mut _0: IpAddr;

    bb0: {
        _0 = IpAddr::V0;
        return;
    }
}
