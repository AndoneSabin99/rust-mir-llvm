// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::string::String;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 2];
    let _9: [core::fmt::rt::Argument<'_>; 2];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &&std::string::String;
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &&std::string::String;
    let _15: ();
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 1];
    let _20: [core::fmt::rt::Argument<'_>; 1];
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: &&mut std::string::String;
    scope 1 {
        debug s => _1;
        let _2: &std::string::String;
        scope 2 {
            debug r1 => _2;
            let _3: &std::string::String;
            scope 3 {
                debug r2 => _3;
                let _14: &mut std::string::String;
                let mut _24: &[&str; 3];
                scope 4 {
                    debug r3 => _14;
                    let mut _23: &[&str; 2];
                }
            }
        }
    }

    bb0: {
        _1 = <String as From<&str>>::from(const "hello") -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_1;
        _3 = &_1;
        _24 = const _;
        _6 = _24 as &[&str] (PointerCoercion(Unsize));
        _11 = &_2;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<&String>(_11) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _13 = &_3;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<&String>(_13) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _9 = [move _10, move _12];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _4 = _print(move _5) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _14 = &mut _1;
        _23 = const _;
        _17 = _23 as &[&str] (PointerCoercion(Unsize));
        _22 = &_14;
        _21 = core::fmt::rt::Argument::<'_>::new_display::<&mut String>(_22) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _20 = [move _21];
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _15 = _print(move _16) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        drop(_1) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " and ", const "\n"];
        _0 = &_1;
        return;
    }
}
