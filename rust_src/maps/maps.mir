// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<i32>;
    let mut _2: std::boxed::Box<[i32]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[i32; 4]>;
    let mut _8: std::iter::Map<std::slice::Iter<'_, i32>, [closure@maps.rs:5:14: 5:17]>;
    let mut _9: std::slice::Iter<'_, i32>;
    let mut _10: &[i32];
    let _11: &[i32];
    let mut _12: &std::vec::Vec<i32>;
    let mut _13: *const [i32; 4];
    let mut _14: *const ();
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: bool;
    scope 1 {
        debug numbers => _1;
        let _7: std::vec::Vec<i32>;
        scope 3 {
            debug result => _7;
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([i32; 4]);
        _4 = AlignOf([i32; 4]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [i32; 4]);
        _13 = (((_6.0: std::ptr::Unique<[i32; 4]>).0: std::ptr::NonNull<[i32; 4]>).0: *const [i32; 4]);
        _14 = _13 as *const () (PtrToPtr);
        _15 = _14 as usize (Transmute);
        _16 = AlignOf(i32);
        _17 = Sub(_16, const 1_usize);
        _18 = BitAnd(_15, _17);
        _19 = Eq(_18, const 0_usize);
        assert(_19, "misaligned pointer dereference: address must be a multiple of {} but is {}", _16, _15) -> [success: bb11, unwind unreachable];
    }

    bb2: {
        _12 = &_1;
        _11 = <Vec<i32> as Deref>::deref(move _12) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _10 = _11;
        _9 = core::slice::<impl [i32]>::iter(move _10) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _8 = <std::slice::Iter<'_, i32> as Iterator>::map::<i32, [closure@maps.rs:5:14: 5:17]>(move _9, const ZeroSized: [closure@maps.rs:5:14: 5:17]) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _7 = <Map<std::slice::Iter<'_, i32>, [closure@maps.rs:5:14: 5:17]> as Iterator>::collect::<Vec<i32>>(move _8) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        drop(_7) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        drop(_1) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        (*_13) = [const 3_i32, const 6_i32, const 9_i32, const 12_i32];
        _2 = move _6 as std::boxed::Box<[i32]> (PointerCoercion(Unsize));
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

fn main::{closure#0}(_1: &mut [closure@maps.rs:5:14: 5:17], _2: &i32) -> i32 {
    debug n => _2;
    let mut _0: i32;

    bb0: {
        _0 = <&i32 as Mul<i32>>::mul(_2, const 10_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
