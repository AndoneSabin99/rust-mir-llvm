// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at refcell.rs:1:10: 1:15>::fmt(_1: &List, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &std::rc::Rc<std::cell::RefCell<i32>>;
    let _5: &std::rc::Rc<List>;
    let _6: &str;
    let mut _7: &dyn std::fmt::Debug;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::rc::Rc<List>;
    let _10: &str;
    scope 1 {
        debug __self_0 => _4;
        debug __self_1 => _5;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _10 = const "Nil";
        _0 = Formatter::<'_>::write_str(_2, _10) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Cons).0: std::rc::Rc<std::cell::RefCell<i32>>);
        _5 = &(((*_1) as Cons).1: std::rc::Rc<List>);
        _6 = const "Cons";
        _7 = _4 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = &_5;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field2_finish(_2, _6, move _7, move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _2: std::cell::RefCell<i32>;
    let mut _4: List;
    let mut _5: std::rc::Rc<std::cell::RefCell<i32>>;
    let _6: &std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _7: std::rc::Rc<List>;
    let mut _8: List;
    let mut _10: std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _11: std::cell::RefCell<i32>;
    let mut _12: std::rc::Rc<List>;
    let _13: &std::rc::Rc<List>;
    let mut _15: std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _16: std::cell::RefCell<i32>;
    let mut _17: std::rc::Rc<List>;
    let _18: &std::rc::Rc<List>;
    let mut _19: &mut i32;
    let mut _20: &mut std::cell::RefMut<'_, i32>;
    let mut _21: std::cell::RefMut<'_, i32>;
    let mut _22: &std::cell::RefCell<i32>;
    let _23: &std::cell::RefCell<i32>;
    let mut _24: &std::rc::Rc<std::cell::RefCell<i32>>;
    let mut _25: (i32, bool);
    let _26: ();
    let mut _27: std::fmt::Arguments<'_>;
    let mut _28: &[&str];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: [core::fmt::rt::Argument<'_>; 1];
    let mut _32: core::fmt::rt::Argument<'_>;
    let _33: &std::rc::Rc<List>;
    let _34: ();
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: [core::fmt::rt::Argument<'_>; 1];
    let mut _40: core::fmt::rt::Argument<'_>;
    let _41: &List;
    let _42: ();
    let mut _43: std::fmt::Arguments<'_>;
    let mut _44: &[&str];
    let mut _45: &[core::fmt::rt::Argument<'_>];
    let _46: &[core::fmt::rt::Argument<'_>; 1];
    let _47: [core::fmt::rt::Argument<'_>; 1];
    let mut _48: core::fmt::rt::Argument<'_>;
    let _49: &List;
    scope 1 {
        debug value => _1;
        let _3: std::rc::Rc<List>;
        scope 2 {
            debug a => _3;
            let _9: List;
            scope 3 {
                debug b => _9;
                let _14: List;
                scope 4 {
                    debug c => _14;
                    let mut _50: &[&str; 2];
                    let mut _51: &[&str; 2];
                    let mut _52: &[&str; 2];
                }
            }
        }
    }

    bb0: {
        _2 = RefCell::<i32>::new(const 5_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Rc::<RefCell<i32>>::new(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_1;
        _5 = <Rc<RefCell<i32>> as Clone>::clone(_6) -> [return: bb3, unwind: bb37];
    }

    bb3: {
        _8 = List::Nil;
        _7 = Rc::<List>::new(move _8) -> [return: bb4, unwind: bb36];
    }

    bb4: {
        _4 = List::Cons(move _5, move _7);
        _3 = Rc::<List>::new(move _4) -> [return: bb5, unwind: bb37];
    }

    bb5: {
        _11 = RefCell::<i32>::new(const 3_i32) -> [return: bb6, unwind: bb35];
    }

    bb6: {
        _10 = Rc::<RefCell<i32>>::new(move _11) -> [return: bb7, unwind: bb35];
    }

    bb7: {
        _13 = &_3;
        _12 = <Rc<List> as Clone>::clone(_13) -> [return: bb8, unwind: bb34];
    }

    bb8: {
        _9 = List::Cons(move _10, move _12);
        _16 = RefCell::<i32>::new(const 4_i32) -> [return: bb9, unwind: bb33];
    }

    bb9: {
        _15 = Rc::<RefCell<i32>>::new(move _16) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        _18 = &_3;
        _17 = <Rc<List> as Clone>::clone(_18) -> [return: bb11, unwind: bb32];
    }

    bb11: {
        _14 = List::Cons(move _15, move _17);
        _24 = &_1;
        _23 = <Rc<RefCell<i32>> as Deref>::deref(move _24) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        _22 = _23;
        _21 = RefCell::<i32>::borrow_mut(move _22) -> [return: bb13, unwind: bb31];
    }

    bb13: {
        _20 = &mut _21;
        _19 = <RefMut<'_, i32> as DerefMut>::deref_mut(move _20) -> [return: bb14, unwind: bb30];
    }

    bb14: {
        _25 = CheckedAdd((*_19), const 10_i32);
        assert(!move (_25.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_19), const 10_i32) -> [success: bb15, unwind: bb30];
    }

    bb15: {
        (*_19) = move (_25.0: i32);
        drop(_21) -> [return: bb16, unwind: bb31];
    }

    bb16: {
        _52 = const _;
        _28 = _52 as &[&str] (PointerCoercion(Unsize));
        _33 = &_3;
        _32 = core::fmt::rt::Argument::<'_>::new_debug::<Rc<List>>(_33) -> [return: bb17, unwind: bb31];
    }

    bb17: {
        _31 = [move _32];
        _30 = &_31;
        _29 = _30 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _27 = Arguments::<'_>::new_v1(move _28, move _29) -> [return: bb18, unwind: bb31];
    }

    bb18: {
        _26 = _print(move _27) -> [return: bb19, unwind: bb31];
    }

    bb19: {
        _51 = const _;
        _36 = _51 as &[&str] (PointerCoercion(Unsize));
        _41 = &_9;
        _40 = core::fmt::rt::Argument::<'_>::new_debug::<List>(_41) -> [return: bb20, unwind: bb31];
    }

    bb20: {
        _39 = [move _40];
        _38 = &_39;
        _37 = _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _35 = Arguments::<'_>::new_v1(move _36, move _37) -> [return: bb21, unwind: bb31];
    }

    bb21: {
        _34 = _print(move _35) -> [return: bb22, unwind: bb31];
    }

    bb22: {
        _50 = const _;
        _44 = _50 as &[&str] (PointerCoercion(Unsize));
        _49 = &_14;
        _48 = core::fmt::rt::Argument::<'_>::new_debug::<List>(_49) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        _47 = [move _48];
        _46 = &_47;
        _45 = _46 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _43 = Arguments::<'_>::new_v1(move _44, move _45) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        _42 = _print(move _43) -> [return: bb25, unwind: bb31];
    }

    bb25: {
        drop(_14) -> [return: bb26, unwind: bb33];
    }

    bb26: {
        drop(_9) -> [return: bb27, unwind: bb35];
    }

    bb27: {
        drop(_3) -> [return: bb28, unwind: bb37];
    }

    bb28: {
        drop(_1) -> [return: bb29, unwind continue];
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        drop(_21) -> [return: bb31, unwind terminate];
    }

    bb31 (cleanup): {
        drop(_14) -> [return: bb33, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_15) -> [return: bb33, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_9) -> [return: bb35, unwind terminate];
    }

    bb34 (cleanup): {
        drop(_10) -> [return: bb35, unwind terminate];
    }

    bb35 (cleanup): {
        drop(_3) -> [return: bb37, unwind terminate];
    }

    bb36 (cleanup): {
        drop(_5) -> [return: bb37, unwind terminate];
    }

    bb37 (cleanup): {
        drop(_1) -> [return: bb38, unwind terminate];
    }

    bb38 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "c after = ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "b after = ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "a after = ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn List::Cons(_1: Rc<RefCell<i32>>, _2: Rc<List>) -> List {
    let mut _0: List;

    bb0: {
        _0 = List::Cons(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn List::Cons(_1: Rc<RefCell<i32>>, _2: Rc<List>) -> List {
    let mut _0: List;

    bb0: {
        _0 = List::Cons(move _1, move _2);
        return;
    }
}
