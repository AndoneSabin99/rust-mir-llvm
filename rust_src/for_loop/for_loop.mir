// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [i32; 5];
    let mut _2: std::slice::Iter<'_, i32>;
    let mut _3: std::slice::Iter<'_, i32>;
    let mut _4: &[i32];
    let mut _5: &[i32; 5];
    let mut _7: std::option::Option<&i32>;
    let mut _8: &mut std::slice::Iter<'_, i32>;
    let mut _9: isize;
    let _11: ();
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[core::fmt::rt::Argument<'_>];
    let _15: &[core::fmt::rt::Argument<'_>; 1];
    let _16: [core::fmt::rt::Argument<'_>; 1];
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &&i32;
    scope 1 {
        debug a => _1;
        let mut _6: std::slice::Iter<'_, i32>;
        scope 2 {
            debug iter => _6;
            let _10: &i32;
            scope 3 {
                debug element => _10;
                let mut _19: &[&str; 2];
            }
        }
    }

    bb0: {
        _1 = [const 10_i32, const 20_i32, const 30_i32, const 40_i32, const 50_i32];
        _5 = &_1;
        _4 = move _5 as &[i32] (PointerCoercion(Unsize));
        _3 = core::slice::<impl [i32]>::iter(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <std::slice::Iter<'_, i32> as IntoIterator>::into_iter(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = move _2;
        goto -> bb3;
    }

    bb3: {
        _8 = &mut _6;
        _7 = <std::slice::Iter<'_, i32> as Iterator>::next(_8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _10 = ((_7 as Some).0: &i32);
        _19 = const _;
        _13 = _19 as &[&str] (PointerCoercion(Unsize));
        _18 = &_10;
        _17 = core::fmt::rt::Argument::<'_>::new_display::<&i32>(_18) -> [return: bb8, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        return;
    }

    bb8: {
        _16 = [move _17];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb9, unwind continue];
    }

    bb9: {
        _11 = _print(move _12) -> [return: bb3, unwind continue];
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Iteration loop: the value is: ", const "\n"];
        _0 = &_1;
        return;
    }
}
