// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let _3: std::string::String;
    let mut _5: &std::string::String;
    let _6: ();
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 2];
    let _11: [core::fmt::rt::Argument<'_>; 2];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &std::string::String;
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &std::string::String;
    let _16: i32;
    let _18: ();
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let _22: &[core::fmt::rt::Argument<'_>; 2];
    let _23: [core::fmt::rt::Argument<'_>; 2];
    let mut _24: core::fmt::rt::Argument<'_>;
    let _25: &i32;
    let mut _26: core::fmt::rt::Argument<'_>;
    let _27: &i32;
    let _29: ();
    let mut _30: std::string::String;
    let _32: ();
    scope 1 {
        debug s1 => _1;
        let _2: std::string::String;
        scope 2 {
            debug _s2 => _2;
        }
    }
    scope 3 {
        debug s1 => _3;
        let _4: std::string::String;
        scope 4 {
            debug s2 => _4;
            let mut _34: &[&str; 3];
        }
    }
    scope 5 {
        debug x => const 5_i32;
        let _17: i32;
        scope 6 {
            debug y => _17;
            let _28: std::string::String;
            let mut _33: &[&str; 3];
            scope 7 {
                debug s => _28;
                let _31: i32;
                scope 8 {
                    debug x => const 5_i32;
                }
            }
        }
    }

    bb0: {
        _1 = <String as From<&str>>::from(const "hello") -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = move _1;
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = <String as From<&str>>::from(const "hello") -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = &_3;
        _4 = <String as Clone>::clone(move _5) -> [return: bb4, unwind: bb19];
    }

    bb4: {
        _34 = const _;
        _8 = _34 as &[&str] (PointerCoercion(Unsize));
        _13 = &_3;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<String>(_13) -> [return: bb5, unwind: bb18];
    }

    bb5: {
        _15 = &_4;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<String>(_15) -> [return: bb6, unwind: bb18];
    }

    bb6: {
        _11 = [move _12, move _14];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _6 = _print(move _7) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        drop(_4) -> [return: bb9, unwind: bb19];
    }

    bb9: {
        drop(_3) -> [return: bb10, unwind continue];
    }

    bb10: {
        _16 = const 5_i32;
        _17 = _16;
        _33 = const _;
        _20 = _33 as &[&str] (PointerCoercion(Unsize));
        _25 = &_16;
        _24 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_25) -> [return: bb11, unwind continue];
    }

    bb11: {
        _27 = &_17;
        _26 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_27) -> [return: bb12, unwind continue];
    }

    bb12: {
        _23 = [move _24, move _26];
        _22 = &_23;
        _21 = _22 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _19 = Arguments::<'_>::new_v1(move _20, move _21) -> [return: bb13, unwind continue];
    }

    bb13: {
        _18 = _print(move _19) -> [return: bb14, unwind continue];
    }

    bb14: {
        _28 = <String as From<&str>>::from(const "hello") -> [return: bb15, unwind continue];
    }

    bb15: {
        _30 = move _28;
        _29 = takes_ownership(move _30) -> [return: bb16, unwind continue];
    }

    bb16: {
        _31 = const 5_i32;
        _32 = makes_copy(_31) -> [return: bb17, unwind continue];
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_4) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        drop(_3) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "x = ", const ", y = ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "s1 = ", const ", s2 = ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn takes_ownership(_1: String) -> () {
    debug some_string => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::string::String;
    let mut _10: &[&str; 2];

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (PointerCoercion(Unsize));
        _9 = &_1;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<String>(_9) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_1) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

promoted[0] in takes_ownership: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn makes_copy(_1: i32) -> () {
    debug some_integer => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &i32;
    let mut _10: &[&str; 2];

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (PointerCoercion(Unsize));
        _9 = &_1;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in makes_copy: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
