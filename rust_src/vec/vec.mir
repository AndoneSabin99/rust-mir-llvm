// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<i32>;
    let _2: ();
    let mut _3: &mut std::vec::Vec<i32>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<i32>;
    let _6: ();
    let mut _7: &mut std::vec::Vec<i32>;
    let _8: ();
    let mut _9: &mut std::vec::Vec<i32>;
    let _10: std::option::Option<i32>;
    let mut _11: &mut std::vec::Vec<i32>;
    let mut _13: std::option::Option<&i32>;
    let mut _14: &[i32];
    let _15: &[i32];
    let mut _16: &std::vec::Vec<i32>;
    let mut _18: std::option::Option<&i32>;
    let mut _19: &[i32];
    let _20: &[i32];
    let mut _21: &std::vec::Vec<i32>;
    scope 1 {
        debug v => _1;
        let _12: &i32;
        scope 2 {
            debug n => _12;
            let _17: &i32;
            scope 3 {
                debug nn => _17;
            }
        }
    }

    bb0: {
        _1 = Vec::<i32>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _1;
        _2 = Vec::<i32>::push(move _3, const 5_i32) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        _5 = &mut _1;
        _4 = Vec::<i32>::push(move _5, const 5_i32) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _7 = &mut _1;
        _6 = Vec::<i32>::push(move _7, const 6_i32) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _9 = &mut _1;
        _8 = Vec::<i32>::push(move _9, const 5_i32) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _11 = &mut _1;
        _10 = Vec::<i32>::pop(move _11) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _16 = &_1;
        _15 = <Vec<i32> as Deref>::deref(move _16) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _14 = _15;
        _13 = core::slice::<impl [i32]>::get::<usize>(move _14, const 0_usize) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _12 = Option::<&i32>::unwrap(move _13) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _21 = &_1;
        _20 = <Vec<i32> as Deref>::deref(move _21) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        _19 = _20;
        _18 = core::slice::<impl [i32]>::get::<usize>(move _19, const 2_usize) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        _17 = Option::<&i32>::unwrap(move _18) -> [return: bb12, unwind: bb14];
    }

    bb12: {
        drop(_1) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_1) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }
}
