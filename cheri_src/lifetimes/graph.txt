digraph __crate__ {
subgraph cluster_Mir_0_4 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn outliving_longest(_1: &amp;str, _2: &amp;str) -&gt; std::string::String<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: usize;<br align="left"/>let mut _5: &amp;str;<br align="left"/>let mut _6: usize;<br align="left"/>let mut _7: &amp;str;<br align="left"/>let mut _8: &amp;str;<br align="left"/>let mut _9: &amp;str;<br align="left"/>debug x =&gt; _1;<br align="left"/>debug y =&gt; _2;<br align="left"/>>;
    bb0__0_4 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_5 = _1<br/></td></tr><tr><td align="left">_4 = core::str::&lt;impl str&gt;::len(move _5)</td></tr></table>>];
    bb1__0_4 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = _2<br/></td></tr><tr><td align="left">_6 = core::str::&lt;impl str&gt;::len(move _7)</td></tr></table>>];
    bb2__0_4 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_3 = Gt(move _4, move _6)<br/></td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb3__0_4 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_8 = _1<br/></td></tr><tr><td align="left">_0 = &lt;str as ToOwned&gt;::to_owned(move _8)</td></tr></table>>];
    bb4__0_4 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_9 = _2<br/></td></tr><tr><td align="left">_0 = &lt;str as ToOwned&gt;::to_owned(move _9)</td></tr></table>>];
    bb5__0_4 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4 -> bb1__0_4 [label="return"];
    bb1__0_4 -> bb2__0_4 [label="return"];
    bb2__0_4 -> bb4__0_4 [label="false"];
    bb2__0_4 -> bb3__0_4 [label="otherwise"];
    bb3__0_4 -> bb5__0_4 [label="return"];
    bb4__0_4 -> bb5__0_4 [label="return"];
}
subgraph cluster_Mir_0_3 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn main() -&gt; ()<br align="left"/>let _1: std::string::String;<br align="left"/>let _2: std::string::String;<br align="left"/>let _3: std::string::String;<br align="left"/>let mut _4: std::string::String;<br align="left"/>let mut _5: &amp;str;<br align="left"/>let _6: &amp;str;<br align="left"/>let mut _7: &amp;std::string::String;<br align="left"/>let _8: &amp;std::string::String;<br align="left"/>let mut _9: &amp;str;<br align="left"/>let _10: &amp;str;<br align="left"/>let mut _11: &amp;std::string::String;<br align="left"/>let _12: &amp;std::string::String;<br align="left"/>let _13: ();<br align="left"/>let mut _14: std::fmt::Arguments;<br align="left"/>let mut _15: [std::fmt::ArgumentV1; 1];<br align="left"/>let mut _16: (&amp;std::string::String,);<br align="left"/>let mut _17: &amp;std::string::String;<br align="left"/>let _18: &amp;std::string::String;<br align="left"/>let mut _19: std::fmt::ArgumentV1;<br align="left"/>let mut _20: &amp;std::string::String;<br align="left"/>let mut _21: for&lt;'r, 's, 't0&gt; fn(&amp;'r std::string::String, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;;<br align="left"/>let _22: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let mut _23: &amp;[&amp;str];<br align="left"/>let mut _24: &amp;[&amp;str; 2];<br align="left"/>let _25: &amp;[&amp;str; 2];<br align="left"/>let mut _26: &amp;[std::fmt::ArgumentV1];<br align="left"/>let mut _27: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let mut _28: &amp;[&amp;str; 2];<br align="left"/>let mut _29: bool;<br align="left"/>debug x =&gt; _1;<br align="left"/>debug z =&gt; _2;<br align="left"/>debug y =&gt; _3;<br align="left"/>debug arg0 =&gt; _18;<br align="left"/>debug args =&gt; _22;<br align="left"/>>;
    bb0__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_29 = const false<br/></td></tr><tr><td align="left">_1 = &lt;String as From&lt;&amp;str&gt;&gt;::from(const &quot;hi&quot;)</td></tr></table>>];
    bb1__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">_3 = &lt;String as From&lt;&amp;str&gt;&gt;::from(const &quot;there&quot;)</td></tr></table>>];
    bb2__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_8 = &amp;_1<br/>_7 = _8<br/></td></tr><tr><td align="left">_6 = &lt;String as Deref&gt;::deref(move _7)</td></tr></table>>];
    bb3__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_5 = _6<br/>_12 = &amp;_3<br/>_11 = _12<br/></td></tr><tr><td align="left">_10 = &lt;String as Deref&gt;::deref(move _11)</td></tr></table>>];
    bb4__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_9 = _10<br/></td></tr><tr><td align="left">_4 = outliving_longest(move _5, move _9)</td></tr></table>>];
    bb5__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_29 = const true<br/>_2 = move _4<br/></td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb6__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_17 = &amp;_2<br/>(_16.0: &amp;std::string::String) = move _17<br/>_18 = (_16.0: &amp;std::string::String)<br/>_20 = _18<br/>_21 = &lt;String as std::fmt::Display&gt;::fmt as for&lt;'r, 's, 't0&gt; fn(&amp;'r std::string::String, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))<br/></td></tr><tr><td align="left">_19 = ArgumentV1::new::&lt;String&gt;(move _20, move _21)</td></tr></table>>];
    bb7__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_15 = [move _19]<br/>_22 = &amp;_15<br/>_28 = const main::promoted[0]<br/>_25 = _28<br/>_24 = _25<br/>_23 = move _24 as &amp;[&amp;str] (Pointer(Unsize))<br/>_27 = _22<br/>_26 = move _27 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_14 = Arguments::new_v1(move _23, move _26)</td></tr></table>>];
    bb8__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">_13 = _print(move _14)</td></tr></table>>];
    bb9__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb10__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_29 = const false<br/></td></tr><tr><td align="left">drop(_1)</td></tr></table>>];
    bb11__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">return</td></tr></table>>];
    bb12__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">12 (cleanup)</td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb13__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">13 (cleanup)</td></tr><tr><td align="left">drop(_1)</td></tr></table>>];
    bb14__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">14 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb15__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">15 (cleanup)</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb16__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">16 (cleanup)</td></tr><tr><td align="left">switchInt(_29)</td></tr></table>>];
    bb0__0_3 -> bb1__0_3 [label="return"];
    bb1__0_3 -> bb2__0_3 [label="return"];
    bb1__0_3 -> bb16__0_3 [label="unwind"];
    bb2__0_3 -> bb3__0_3 [label="return"];
    bb2__0_3 -> bb12__0_3 [label="unwind"];
    bb3__0_3 -> bb4__0_3 [label="return"];
    bb3__0_3 -> bb12__0_3 [label="unwind"];
    bb4__0_3 -> bb5__0_3 [label="return"];
    bb4__0_3 -> bb12__0_3 [label="unwind"];
    bb5__0_3 -> bb6__0_3 [label="return"];
    bb5__0_3 -> bb16__0_3 [label="unwind"];
    bb6__0_3 -> bb7__0_3 [label="return"];
    bb6__0_3 -> bb16__0_3 [label="unwind"];
    bb7__0_3 -> bb8__0_3 [label="return"];
    bb7__0_3 -> bb16__0_3 [label="unwind"];
    bb8__0_3 -> bb9__0_3 [label="return"];
    bb8__0_3 -> bb16__0_3 [label="unwind"];
    bb9__0_3 -> bb10__0_3 [label="return"];
    bb9__0_3 -> bb13__0_3 [label="unwind"];
    bb10__0_3 -> bb11__0_3 [label="return"];
    bb12__0_3 -> bb16__0_3 [label="return"];
    bb13__0_3 -> bb14__0_3 [label="return"];
    bb15__0_3 -> bb13__0_3 [label="return"];
    bb16__0_3 -> bb13__0_3 [label="false"];
    bb16__0_3 -> bb15__0_3 [label="otherwise"];
}
}
