// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at nll_example.rs:1:10: 1:10
    let mut _1: std::string::String;     // in scope 0 at nll_example.rs:2:9: 2:14
    let _4: ();                          // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
    let mut _5: std::fmt::Arguments;     // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _6: [std::fmt::ArgumentV1; 2]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _7: (&&std::string::String, &&std::string::String); // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _8: &&std::string::String;   // in scope 0 at nll_example.rs:5:27: 5:29
    let mut _9: &&std::string::String;   // in scope 0 at nll_example.rs:5:31: 5:33
    let mut _12: std::fmt::ArgumentV1;   // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _13: &&std::string::String;  // in scope 0 at nll_example.rs:5:27: 5:29
    let mut _14: for<'r, 's, 't0> fn(&'r &std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at nll_example.rs:5:27: 5:29
    let mut _15: std::fmt::ArgumentV1;   // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _16: &&std::string::String;  // in scope 0 at nll_example.rs:5:31: 5:33
    let mut _17: for<'r, 's, 't0> fn(&'r &std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at nll_example.rs:5:31: 5:33
    let mut _19: &[&str];                // in scope 0 at nll_example.rs:5:14: 5:25
    let mut _20: &[&str; 3];             // in scope 0 at nll_example.rs:5:14: 5:25
    let _21: &[&str; 3];                 // in scope 0 at nll_example.rs:5:14: 5:25
    let mut _22: &[std::fmt::ArgumentV1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _23: &[std::fmt::ArgumentV1; 2]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let _25: ();                         // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
    let mut _26: std::fmt::Arguments;    // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _27: [std::fmt::ArgumentV1; 1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _28: (&&mut std::string::String,); // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _29: &&mut std::string::String; // in scope 0 at nll_example.rs:8:20: 8:22
    let mut _31: std::fmt::ArgumentV1;   // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _32: &&mut std::string::String; // in scope 0 at nll_example.rs:8:20: 8:22
    let mut _33: for<'r, 's, 't0> fn(&'r &mut std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at nll_example.rs:8:20: 8:22
    let mut _35: &[&str];                // in scope 0 at nll_example.rs:8:14: 8:18
    let mut _36: &[&str; 2];             // in scope 0 at nll_example.rs:8:14: 8:18
    let _37: &[&str; 2];                 // in scope 0 at nll_example.rs:8:14: 8:18
    let mut _38: &[std::fmt::ArgumentV1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _39: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    scope 1 {
        debug s => _1;                   // in scope 1 at nll_example.rs:2:9: 2:14
        let _2: &std::string::String;    // in scope 1 at nll_example.rs:3:9: 3:11
        scope 2 {
            debug r1 => _2;              // in scope 2 at nll_example.rs:3:9: 3:11
            let _3: &std::string::String; // in scope 2 at nll_example.rs:4:9: 4:11
            scope 3 {
                debug r2 => _3;          // in scope 3 at nll_example.rs:4:9: 4:11
                let _10: &&std::string::String; // in scope 3 at nll_example.rs:5:27: 5:29
                let _11: &&std::string::String; // in scope 3 at nll_example.rs:5:31: 5:33
                let _18: &[std::fmt::ArgumentV1; 2]; // in scope 3 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                let _24: &mut std::string::String; // in scope 3 at nll_example.rs:7:9: 7:11
                scope 4 {
                    debug arg0 => _10;   // in scope 4 at nll_example.rs:5:27: 5:29
                    debug arg1 => _11;   // in scope 4 at nll_example.rs:5:31: 5:33
                }
                scope 5 {
                    debug args => _18;   // in scope 5 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                    scope 6 {
                        let mut _41: &[&str; 3]; // in scope 6 at nll_example.rs:5:14: 5:25
                    }
                }
                scope 7 {
                    debug r3 => _24;     // in scope 7 at nll_example.rs:7:9: 7:11
                    let _30: &&mut std::string::String; // in scope 7 at nll_example.rs:8:20: 8:22
                    let _34: &[std::fmt::ArgumentV1; 1]; // in scope 7 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                    scope 8 {
                        debug arg0 => _30; // in scope 8 at nll_example.rs:8:20: 8:22
                    }
                    scope 9 {
                        debug args => _34; // in scope 9 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                        scope 10 {
                            let mut _40: &[&str; 2]; // in scope 10 at nll_example.rs:8:14: 8:18
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = <String as From<&str>>::from(const "hello") -> bb1; // scope 0 at nll_example.rs:2:17: 2:38
                                         // mir::Constant
                                         // + span: nll_example.rs:2:17: 2:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> std::string::String {<std::string::String as std::convert::From<&str>>::from}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: nll_example.rs:2:30: 2:37
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
    }

    bb1: {
        _2 = &_1;                        // scope 1 at nll_example.rs:3:14: 3:16
        _3 = &_1;                        // scope 2 at nll_example.rs:4:14: 4:16
        _8 = &_2;                        // scope 3 at nll_example.rs:5:27: 5:29
        _9 = &_3;                        // scope 3 at nll_example.rs:5:31: 5:33
        (_7.0: &&std::string::String) = move _8; // scope 3 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        (_7.1: &&std::string::String) = move _9; // scope 3 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _10 = (_7.0: &&std::string::String); // scope 3 at nll_example.rs:5:27: 5:29
        _11 = (_7.1: &&std::string::String); // scope 3 at nll_example.rs:5:31: 5:33
        _13 = _10;                       // scope 4 at nll_example.rs:5:27: 5:29
        _14 = <&String as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r &std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 4 at nll_example.rs:5:27: 5:29
                                         // mir::Constant
                                         // + span: nll_example.rs:5:27: 5:29
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&std::string::String as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _12 = ArgumentV1::new::<&String>(move _13, move _14) -> [return: bb2, unwind: bb10]; // scope 4 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &std::string::String, for<'r, 's, 't0> fn(&'r &std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<&std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _16 = _11;                       // scope 4 at nll_example.rs:5:31: 5:33
        _17 = <&String as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r &std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 4 at nll_example.rs:5:31: 5:33
                                         // mir::Constant
                                         // + span: nll_example.rs:5:31: 5:33
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&std::string::String as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _15 = ArgumentV1::new::<&String>(move _16, move _17) -> [return: bb3, unwind: bb10]; // scope 4 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &std::string::String, for<'r, 's, 't0> fn(&'r &std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<&std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _6 = [move _12, move _15];       // scope 4 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _18 = &_6;                       // scope 3 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _41 = const main::promoted[1];   // scope 6 at nll_example.rs:5:14: 5:25
                                         // ty::Const
                                         // + ty: &[&str; 3]
                                         // + val: Unevaluated(main, [], Some(promoted[1]))
                                         // mir::Constant
                                         // + span: nll_example.rs:5:14: 5:25
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ nll_example[a436]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[1]) }) }
        _21 = _41;                       // scope 6 at nll_example.rs:5:14: 5:25
        _20 = _21;                       // scope 6 at nll_example.rs:5:14: 5:25
        _19 = move _20 as &[&str] (Pointer(Unsize)); // scope 6 at nll_example.rs:5:14: 5:25
        _23 = _18;                       // scope 6 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _22 = move _23 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 6 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _5 = Arguments::new_v1(move _19, move _22) -> [return: bb4, unwind: bb10]; // scope 6 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: unsafe fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _4 = _print(move _5) -> [return: bb5, unwind: bb10]; // scope 3 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _24 = &mut _1;                   // scope 3 at nll_example.rs:7:14: 7:20
        _29 = &_24;                      // scope 7 at nll_example.rs:8:20: 8:22
        (_28.0: &&mut std::string::String) = move _29; // scope 7 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _30 = (_28.0: &&mut std::string::String); // scope 7 at nll_example.rs:8:20: 8:22
        _32 = _30;                       // scope 8 at nll_example.rs:8:20: 8:22
        _33 = <&mut String as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r &mut std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 8 at nll_example.rs:8:20: 8:22
                                         // mir::Constant
                                         // + span: nll_example.rs:8:20: 8:22
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &mut std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&mut std::string::String as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _31 = ArgumentV1::new::<&mut String>(move _32, move _33) -> [return: bb6, unwind: bb10]; // scope 8 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b> fn(&'b &mut std::string::String, for<'r, 's, 't0> fn(&'r &mut std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<&mut std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _27 = [move _31];                // scope 8 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _34 = &_27;                      // scope 7 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _40 = const main::promoted[0];   // scope 10 at nll_example.rs:8:14: 8:18
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(main, [], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: nll_example.rs:8:14: 8:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ nll_example[a436]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }
        _37 = _40;                       // scope 10 at nll_example.rs:8:14: 8:18
        _36 = _37;                       // scope 10 at nll_example.rs:8:14: 8:18
        _35 = move _36 as &[&str] (Pointer(Unsize)); // scope 10 at nll_example.rs:8:14: 8:18
        _39 = _34;                       // scope 10 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _38 = move _39 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 10 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _26 = Arguments::new_v1(move _35, move _38) -> [return: bb7, unwind: bb10]; // scope 10 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: unsafe fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _25 = _print(move _26) -> [return: bb8, unwind: bb10]; // scope 7 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        drop(_1) -> bb9;                 // scope 0 at nll_example.rs:9:1: 9:2
    }

    bb9: {
        return;                          // scope 0 at nll_example.rs:9:2: 9:2
    }

    bb10 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at nll_example.rs:9:1: 9:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at nll_example.rs:1:1: 9:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at nll_example.rs:8:14: 8:18
    let mut _1: [&str; 2];               // in scope 0 at nll_example.rs:8:14: 8:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at nll_example.rs:8:14: 8:18
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 })
                                         // mir::Constant
                                         // + span: nll_example.rs:8:14: 8:18
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: nll_example.rs:8:14: 8:18
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _0 = &_1;                        // scope 0 at nll_example.rs:8:14: 8:18
        return;                          // scope 0 at nll_example.rs:8:14: 8:18
    }
}

promoted[1] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at nll_example.rs:5:14: 5:25
    let mut _1: [&str; 3];               // in scope 0 at nll_example.rs:5:14: 5:25

    bb0: {
        _1 = [const "", const " and ", const "\n"]; // scope 0 at nll_example.rs:5:14: 5:25
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 })
                                         // mir::Constant
                                         // + span: nll_example.rs:5:14: 5:25
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [32, 97, 110, 100, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: nll_example.rs:5:14: 5:25
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [32, 97, 110, 100, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: nll_example.rs:5:14: 5:25
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _0 = &_1;                        // scope 0 at nll_example.rs:5:14: 5:25
        return;                          // scope 0 at nll_example.rs:5:14: 5:25
    }
}
