digraph __crate__ {
subgraph cluster_Mir_0_20 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn main() -&gt; ()<br align="left"/>let _1: std::rc::Rc&lt;RcList&gt;;<br align="left"/>let mut _2: RcList;<br align="left"/>let mut _3: std::rc::Rc&lt;RcList&gt;;<br align="left"/>let mut _4: RcList;<br align="left"/>let mut _5: std::rc::Rc&lt;RcList&gt;;<br align="left"/>let mut _6: RcList;<br align="left"/>let _7: RcList;<br align="left"/>let mut _8: std::rc::Rc&lt;RcList&gt;;<br align="left"/>let mut _9: &amp;std::rc::Rc&lt;RcList&gt;;<br align="left"/>let _10: &amp;std::rc::Rc&lt;RcList&gt;;<br align="left"/>let _11: RcList;<br align="left"/>let mut _12: std::rc::Rc&lt;RcList&gt;;<br align="left"/>let mut _13: &amp;std::rc::Rc&lt;RcList&gt;;<br align="left"/>let _14: &amp;std::rc::Rc&lt;RcList&gt;;<br align="left"/>debug a =&gt; _1;<br align="left"/>debug b =&gt; _7;<br align="left"/>debug c =&gt; _11;<br align="left"/>>;
    bb0__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">discriminant(_6) = 1<br/></td></tr><tr><td align="left">_5 = Rc::&lt;RcList&gt;::new(move _6)</td></tr></table>>];
    bb1__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">((_4 as RcCons).0: i32) = const 10_i32<br/>((_4 as RcCons).1: std::rc::Rc&lt;RcList&gt;) = move _5<br/>discriminant(_4) = 0<br/></td></tr><tr><td align="left">_3 = Rc::&lt;RcList&gt;::new(move _4)</td></tr></table>>];
    bb2__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">((_2 as RcCons).0: i32) = const 5_i32<br/>((_2 as RcCons).1: std::rc::Rc&lt;RcList&gt;) = move _3<br/>discriminant(_2) = 0<br/></td></tr><tr><td align="left">_1 = Rc::&lt;RcList&gt;::new(move _2)</td></tr></table>>];
    bb3__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_10 = &amp;_1<br/>_9 = _10<br/></td></tr><tr><td align="left">_8 = &lt;Rc&lt;RcList&gt; as Clone&gt;::clone(move _9)</td></tr></table>>];
    bb4__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">((_7 as RcCons).0: i32) = const 3_i32<br/>((_7 as RcCons).1: std::rc::Rc&lt;RcList&gt;) = move _8<br/>discriminant(_7) = 0<br/>_14 = &amp;_1<br/>_13 = _14<br/></td></tr><tr><td align="left">_12 = &lt;Rc&lt;RcList&gt; as Clone&gt;::clone(move _13)</td></tr></table>>];
    bb5__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">((_11 as RcCons).0: i32) = const 4_i32<br/>((_11 as RcCons).1: std::rc::Rc&lt;RcList&gt;) = move _12<br/>discriminant(_11) = 0<br/></td></tr><tr><td align="left">drop(_11)</td></tr></table>>];
    bb6__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">drop(_7)</td></tr></table>>];
    bb7__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">drop(_1)</td></tr></table>>];
    bb8__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb9__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">9 (cleanup)</td></tr><tr><td align="left">drop(_7)</td></tr></table>>];
    bb10__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left">drop(_1)</td></tr></table>>];
    bb11__0_20 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">11 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_20 -> bb1__0_20 [label="return"];
    bb1__0_20 -> bb2__0_20 [label="return"];
    bb2__0_20 -> bb3__0_20 [label="return"];
    bb3__0_20 -> bb4__0_20 [label="return"];
    bb3__0_20 -> bb10__0_20 [label="unwind"];
    bb4__0_20 -> bb5__0_20 [label="return"];
    bb4__0_20 -> bb9__0_20 [label="unwind"];
    bb5__0_20 -> bb6__0_20 [label="return"];
    bb5__0_20 -> bb9__0_20 [label="unwind"];
    bb6__0_20 -> bb7__0_20 [label="return"];
    bb6__0_20 -> bb10__0_20 [label="unwind"];
    bb7__0_20 -> bb8__0_20 [label="return"];
    bb9__0_20 -> bb10__0_20 [label="return"];
    bb10__0_20 -> bb11__0_20 [label="return"];
}
subgraph cluster_Mir_0_15 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn RcList::RcCons(_1: i32, _2: std::rc::Rc&lt;RcList&gt;) -&gt; RcList<br align="left"/>>;
    bb0__0_15 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">((_0 as RcCons).0: i32) = move _1<br/>((_0 as RcCons).1: std::rc::Rc&lt;RcList&gt;) = move _2<br/>discriminant(_0) = 0<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
subgraph cluster_Mir_0_15 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn RcList::RcCons(_1: i32, _2: std::rc::Rc&lt;RcList&gt;) -&gt; RcList<br align="left"/>>;
    bb0__0_15 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">((_0 as RcCons).0: i32) = move _1<br/>((_0 as RcCons).1: std::rc::Rc&lt;RcList&gt;) = move _2<br/>discriminant(_0) = 0<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
}
