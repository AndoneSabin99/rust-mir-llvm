// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn SGen(_1: T) -> SGen<T> {
    let mut _0: SGen<T>;                 // return place in scope 0 at generics.rs:3:1: 3:19

    bb0: {
        (_0.0: T) = move _1;             // scope 0 at generics.rs:3:1: 3:19
        return;                          // scope 0 at generics.rs:3:1: 3:19
    }
}

// MIR FOR CTFE
fn SGen(_1: T) -> SGen<T> {
    let mut _0: SGen<T>;                 // return place in scope 0 at generics.rs:3:1: 3:19

    bb0: {
        (_0.0: T) = move _1;             // scope 0 at generics.rs:3:1: 3:19
        return;                          // scope 0 at generics.rs:3:1: 3:19
    }
}

fn gen_spec_t(_1: SGen<A>) -> () {
    debug _s => _1;                      // in scope 0 at generics.rs:10:15: 10:17
    let mut _0: ();                      // return place in scope 0 at generics.rs:10:28: 10:28

    bb0: {
        return;                          // scope 0 at generics.rs:10:30: 10:30
    }
}

fn generic(_1: SGen<T>) -> () {
    debug _s => _1;                      // in scope 0 at generics.rs:17:15: 17:17
    let mut _0: ();                      // return place in scope 0 at generics.rs:17:28: 17:28

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at generics.rs:17:29: 17:30
    }

    bb1: {
        return;                          // scope 0 at generics.rs:17:30: 17:30
    }
}

fn reg_fn(_1: S) -> () {
    debug _s => _1;                      // in scope 0 at generics.rs:6:11: 6:13
    let mut _0: ();                      // return place in scope 0 at generics.rs:6:18: 6:18

    bb0: {
        return;                          // scope 0 at generics.rs:6:20: 6:20
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at generics.rs:19:10: 19:10
    let _1: ();                          // in scope 0 at generics.rs:21:5: 21:17
    let mut _2: S;                       // in scope 0 at generics.rs:21:12: 21:16
    let _3: ();                          // in scope 0 at generics.rs:22:5: 22:24
    let mut _4: SGen<A>;                 // in scope 0 at generics.rs:22:16: 22:23
    let _5: ();                          // in scope 0 at generics.rs:23:5: 23:26
    let mut _6: SGen<i32>;               // in scope 0 at generics.rs:23:18: 23:25
    let _7: ();                          // in scope 0 at generics.rs:26:5: 26:31
    let mut _8: SGen<char>;              // in scope 0 at generics.rs:26:21: 26:30
    let _9: ();                          // in scope 0 at generics.rs:28:5: 28:23
    let mut _10: SGen<char>;             // in scope 0 at generics.rs:28:13: 28:22

    bb0: {
        _1 = reg_fn(move _2) -> bb1;     // scope 0 at generics.rs:21:5: 21:17
                                         // mir::Constant
                                         // + span: generics.rs:21:5: 21:11
                                         // + literal: Const { ty: fn(S) {reg_fn}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _3 = gen_spec_t(move _4) -> bb2; // scope 0 at generics.rs:22:5: 22:24
                                         // mir::Constant
                                         // + span: generics.rs:22:5: 22:15
                                         // + literal: Const { ty: fn(SGen<A>) {gen_spec_t}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        (_6.0: i32) = const 6_i32;       // scope 0 at generics.rs:23:18: 23:25
        _5 = gen_spec_i32(move _6) -> bb3; // scope 0 at generics.rs:23:5: 23:26
                                         // mir::Constant
                                         // + span: generics.rs:23:5: 23:17
                                         // + literal: Const { ty: fn(SGen<i32>) {gen_spec_i32}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        (_8.0: char) = const 'a';        // scope 0 at generics.rs:26:21: 26:30
        _7 = generic::<char>(move _8) -> bb4; // scope 0 at generics.rs:26:5: 26:31
                                         // mir::Constant
                                         // + span: generics.rs:26:5: 26:20
                                         // + literal: Const { ty: fn(SGen<char>) {generic::<char>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        (_10.0: char) = const 'c';       // scope 0 at generics.rs:28:13: 28:22
        _9 = generic::<char>(move _10) -> bb5; // scope 0 at generics.rs:28:5: 28:23
                                         // mir::Constant
                                         // + span: generics.rs:28:5: 28:12
                                         // + literal: Const { ty: fn(SGen<char>) {generic::<char>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        return;                          // scope 0 at generics.rs:29:2: 29:2
    }
}

fn gen_spec_i32(_1: SGen<i32>) -> () {
    debug _s => _1;                      // in scope 0 at generics.rs:14:17: 14:19
    let mut _0: ();                      // return place in scope 0 at generics.rs:14:32: 14:32

    bb0: {
        return;                          // scope 0 at generics.rs:14:34: 14:34
    }
}

fn S(_1: A) -> S {
    let mut _0: S;                       // return place in scope 0 at generics.rs:2:1: 2:13

    bb0: {
        (_0.0: A) = move _1;             // scope 0 at generics.rs:2:1: 2:13
        return;                          // scope 0 at generics.rs:2:1: 2:13
    }
}

// MIR FOR CTFE
fn S(_1: A) -> S {
    let mut _0: S;                       // return place in scope 0 at generics.rs:2:1: 2:13

    bb0: {
        (_0.0: A) = move _1;             // scope 0 at generics.rs:2:1: 2:13
        return;                          // scope 0 at generics.rs:2:1: 2:13
    }
}
