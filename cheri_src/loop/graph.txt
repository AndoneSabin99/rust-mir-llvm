digraph Mir_0_3 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn main() -&gt; ()<br align="left"/>let mut _1: i32;<br align="left"/>let _2: ();<br align="left"/>let mut _3: std::fmt::Arguments;<br align="left"/>let _4: &amp;[std::fmt::ArgumentV1; 0];<br align="left"/>let mut _5: &amp;[&amp;str];<br align="left"/>let mut _6: &amp;[&amp;str; 1];<br align="left"/>let _7: &amp;[&amp;str; 1];<br align="left"/>let mut _8: &amp;[std::fmt::ArgumentV1];<br align="left"/>let mut _9: &amp;[std::fmt::ArgumentV1; 0];<br align="left"/>let mut _10: (i32, bool);<br align="left"/>let mut _11: i32;<br align="left"/>let mut _12: &amp;[&amp;str; 1];<br align="left"/>let mut _13: &amp;[std::fmt::ArgumentV1; 0];<br align="left"/>debug c =&gt; _1;<br align="left"/>debug args =&gt; _4;<br align="left"/>>;
    bb0__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_1 = const 0_i32<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb1__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_13 = const main::promoted[1]<br/>_4 = _13<br/>_12 = const main::promoted[0]<br/>_7 = _12<br/>_6 = _7<br/>_5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))<br/>_9 = _4<br/>_8 = move _9 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_3 = Arguments::new_v1(move _5, move _8)</td></tr></table>>];
    bb2__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">_2 = _print(move _3)</td></tr></table>>];
    bb3__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_10 = CheckedAdd(_1, const 1_i32)<br/></td></tr><tr><td align="left">assert(!move (_10.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, _1, const 1_i32)</td></tr></table>>];
    bb4__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_1 = move (_10.0: i32)<br/>_11 = _1<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb5__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3 -> bb1__0_3 [label=""];
    bb1__0_3 -> bb2__0_3 [label="return"];
    bb2__0_3 -> bb3__0_3 [label="return"];
    bb3__0_3 -> bb4__0_3 [label=""];
    bb4__0_3 -> bb5__0_3 [label="4_i32"];
    bb4__0_3 -> bb1__0_3 [label="otherwise"];
}
