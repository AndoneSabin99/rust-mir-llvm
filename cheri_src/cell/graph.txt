digraph __crate__ {
subgraph cluster_Mir_0_6 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn foo(_1: &amp;std::cell::Cell&lt;u32&gt;) -&gt; ()<br align="left"/>let _2: u32;<br align="left"/>let mut _3: &amp;std::cell::Cell&lt;u32&gt;;<br align="left"/>let _4: ();<br align="left"/>let mut _5: &amp;std::cell::Cell&lt;u32&gt;;<br align="left"/>let mut _6: u32;<br align="left"/>let mut _7: u32;<br align="left"/>let mut _8: (u32, bool);<br align="left"/>debug cell =&gt; _1;<br align="left"/>debug value =&gt; _2;<br align="left"/>>;
    bb0__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_3 = _1<br/></td></tr><tr><td align="left">_2 = Cell::&lt;u32&gt;::get(move _3)</td></tr></table>>];
    bb1__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_5 = _1<br/>_7 = _2<br/>_8 = CheckedMul(_7, const 2_u32)<br/></td></tr><tr><td align="left">assert(!move (_8.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _7, const 2_u32)</td></tr></table>>];
    bb2__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_6 = move (_8.0: u32)<br/></td></tr><tr><td align="left">_4 = Cell::&lt;u32&gt;::set(move _5, move _6)</td></tr></table>>];
    bb3__0_6 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_6 -> bb1__0_6 [label="return"];
    bb1__0_6 -> bb2__0_6 [label=""];
    bb2__0_6 -> bb3__0_6 [label="return"];
}
subgraph cluster_Mir_0_7 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn main() -&gt; ()<br align="left"/>let _1: std::cell::Cell&lt;u32&gt;;<br align="left"/>let _2: u32;<br align="left"/>let mut _3: u32;<br align="left"/>let mut _4: &amp;std::cell::Cell&lt;u32&gt;;<br align="left"/>let mut _5: (u32, bool);<br align="left"/>let _6: ();<br align="left"/>let mut _7: std::fmt::Arguments;<br align="left"/>let mut _8: [std::fmt::ArgumentV1; 1];<br align="left"/>let mut _9: (&amp;u32,);<br align="left"/>let mut _10: &amp;u32;<br align="left"/>let _11: u32;<br align="left"/>let mut _12: &amp;std::cell::Cell&lt;u32&gt;;<br align="left"/>let _13: &amp;u32;<br align="left"/>let mut _14: std::fmt::ArgumentV1;<br align="left"/>let mut _15: &amp;u32;<br align="left"/>let mut _16: for&lt;'r, 's, 't0&gt; fn(&amp;'r u32, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;;<br align="left"/>let _17: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let mut _18: &amp;[&amp;str];<br align="left"/>let mut _19: &amp;[&amp;str; 2];<br align="left"/>let _20: &amp;[&amp;str; 2];<br align="left"/>let mut _21: &amp;[std::fmt::ArgumentV1];<br align="left"/>let mut _22: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let _23: ();<br align="left"/>let mut _24: &amp;std::cell::Cell&lt;u32&gt;;<br align="left"/>let _25: &amp;std::cell::Cell&lt;u32&gt;;<br align="left"/>let _26: ();<br align="left"/>let mut _27: std::fmt::Arguments;<br align="left"/>let mut _28: [std::fmt::ArgumentV1; 1];<br align="left"/>let mut _29: (&amp;u32,);<br align="left"/>let mut _30: &amp;u32;<br align="left"/>let _31: u32;<br align="left"/>let mut _32: &amp;std::cell::Cell&lt;u32&gt;;<br align="left"/>let _33: &amp;u32;<br align="left"/>let mut _34: std::fmt::ArgumentV1;<br align="left"/>let mut _35: &amp;u32;<br align="left"/>let mut _36: for&lt;'r, 's, 't0&gt; fn(&amp;'r u32, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;;<br align="left"/>let _37: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let mut _38: &amp;[&amp;str];<br align="left"/>let mut _39: &amp;[&amp;str; 2];<br align="left"/>let _40: &amp;[&amp;str; 2];<br align="left"/>let mut _41: &amp;[std::fmt::ArgumentV1];<br align="left"/>let mut _42: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let _43: ();<br align="left"/>let mut _44: &amp;std::cell::Cell&lt;u32&gt;;<br align="left"/>let mut _45: u32;<br align="left"/>let _46: ();<br align="left"/>let mut _47: std::fmt::Arguments;<br align="left"/>let mut _48: [std::fmt::ArgumentV1; 1];<br align="left"/>let mut _49: (&amp;u32,);<br align="left"/>let mut _50: &amp;u32;<br align="left"/>let _51: u32;<br align="left"/>let mut _52: &amp;std::cell::Cell&lt;u32&gt;;<br align="left"/>let _53: &amp;u32;<br align="left"/>let mut _54: std::fmt::ArgumentV1;<br align="left"/>let mut _55: &amp;u32;<br align="left"/>let mut _56: for&lt;'r, 's, 't0&gt; fn(&amp;'r u32, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;;<br align="left"/>let _57: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let mut _58: &amp;[&amp;str];<br align="left"/>let mut _59: &amp;[&amp;str; 2];<br align="left"/>let _60: &amp;[&amp;str; 2];<br align="left"/>let mut _61: &amp;[std::fmt::ArgumentV1];<br align="left"/>let mut _62: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let mut _63: &amp;[&amp;str; 2];<br align="left"/>let mut _64: &amp;[&amp;str; 2];<br align="left"/>let mut _65: &amp;[&amp;str; 2];<br align="left"/>debug cell =&gt; _1;<br align="left"/>debug new_value =&gt; _2;<br align="left"/>debug arg0 =&gt; _13;<br align="left"/>debug args =&gt; _17;<br align="left"/>debug arg0 =&gt; _33;<br align="left"/>debug args =&gt; _37;<br align="left"/>debug arg0 =&gt; _53;<br align="left"/>debug args =&gt; _57;<br align="left"/>>;
    bb0__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_1 = Cell::&lt;u32&gt;::new(const 1_u32)</td></tr></table>>];
    bb1__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_4 = &amp;_1<br/></td></tr><tr><td align="left">_3 = Cell::&lt;u32&gt;::get(move _4)</td></tr></table>>];
    bb2__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_5 = CheckedAdd(_3, const 10_u32)<br/></td></tr><tr><td align="left">assert(!move (_5.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _3, const 10_u32)</td></tr></table>>];
    bb3__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_2 = move (_5.0: u32)<br/>_12 = &amp;_1<br/></td></tr><tr><td align="left">_11 = Cell::&lt;u32&gt;::get(move _12)</td></tr></table>>];
    bb4__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_10 = &amp;_11<br/>(_9.0: &amp;u32) = move _10<br/>_13 = (_9.0: &amp;u32)<br/>_15 = _13<br/>_16 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;'r, 's, 't0&gt; fn(&amp;'r u32, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))<br/></td></tr><tr><td align="left">_14 = ArgumentV1::new::&lt;u32&gt;(move _15, move _16)</td></tr></table>>];
    bb5__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_8 = [move _14]<br/>_17 = &amp;_8<br/>_65 = const main::promoted[2]<br/>_20 = _65<br/>_19 = _20<br/>_18 = move _19 as &amp;[&amp;str] (Pointer(Unsize))<br/>_22 = _17<br/>_21 = move _22 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_7 = Arguments::new_v1(move _18, move _21)</td></tr></table>>];
    bb6__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">_6 = _print(move _7)</td></tr></table>>];
    bb7__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_25 = &amp;_1<br/>_24 = _25<br/></td></tr><tr><td align="left">_23 = foo(move _24)</td></tr></table>>];
    bb8__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_32 = &amp;_1<br/></td></tr><tr><td align="left">_31 = Cell::&lt;u32&gt;::get(move _32)</td></tr></table>>];
    bb9__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_30 = &amp;_31<br/>(_29.0: &amp;u32) = move _30<br/>_33 = (_29.0: &amp;u32)<br/>_35 = _33<br/>_36 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;'r, 's, 't0&gt; fn(&amp;'r u32, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))<br/></td></tr><tr><td align="left">_34 = ArgumentV1::new::&lt;u32&gt;(move _35, move _36)</td></tr></table>>];
    bb10__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_28 = [move _34]<br/>_37 = &amp;_28<br/>_64 = const main::promoted[1]<br/>_40 = _64<br/>_39 = _40<br/>_38 = move _39 as &amp;[&amp;str] (Pointer(Unsize))<br/>_42 = _37<br/>_41 = move _42 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_27 = Arguments::new_v1(move _38, move _41)</td></tr></table>>];
    bb11__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">_26 = _print(move _27)</td></tr></table>>];
    bb12__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_44 = &amp;_1<br/>_45 = _2<br/></td></tr><tr><td align="left">_43 = Cell::&lt;u32&gt;::set(move _44, move _45)</td></tr></table>>];
    bb13__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_52 = &amp;_1<br/></td></tr><tr><td align="left">_51 = Cell::&lt;u32&gt;::get(move _52)</td></tr></table>>];
    bb14__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_50 = &amp;_51<br/>(_49.0: &amp;u32) = move _50<br/>_53 = (_49.0: &amp;u32)<br/>_55 = _53<br/>_56 = &lt;u32 as std::fmt::Display&gt;::fmt as for&lt;'r, 's, 't0&gt; fn(&amp;'r u32, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))<br/></td></tr><tr><td align="left">_54 = ArgumentV1::new::&lt;u32&gt;(move _55, move _56)</td></tr></table>>];
    bb15__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_48 = [move _54]<br/>_57 = &amp;_48<br/>_63 = const main::promoted[0]<br/>_60 = _63<br/>_59 = _60<br/>_58 = move _59 as &amp;[&amp;str] (Pointer(Unsize))<br/>_62 = _57<br/>_61 = move _62 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_47 = Arguments::new_v1(move _58, move _61)</td></tr></table>>];
    bb16__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left">_46 = _print(move _47)</td></tr></table>>];
    bb17__0_7 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_7 -> bb1__0_7 [label="return"];
    bb1__0_7 -> bb2__0_7 [label="return"];
    bb2__0_7 -> bb3__0_7 [label=""];
    bb3__0_7 -> bb4__0_7 [label="return"];
    bb4__0_7 -> bb5__0_7 [label="return"];
    bb5__0_7 -> bb6__0_7 [label="return"];
    bb6__0_7 -> bb7__0_7 [label="return"];
    bb7__0_7 -> bb8__0_7 [label="return"];
    bb8__0_7 -> bb9__0_7 [label="return"];
    bb9__0_7 -> bb10__0_7 [label="return"];
    bb10__0_7 -> bb11__0_7 [label="return"];
    bb11__0_7 -> bb12__0_7 [label="return"];
    bb12__0_7 -> bb13__0_7 [label="return"];
    bb13__0_7 -> bb14__0_7 [label="return"];
    bb14__0_7 -> bb15__0_7 [label="return"];
    bb15__0_7 -> bb16__0_7 [label="return"];
    bb16__0_7 -> bb17__0_7 [label="return"];
}
}
