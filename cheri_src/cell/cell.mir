// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &Cell<u32>) -> () {
    debug cell => _1;                    // in scope 0 at cell.rs:3:8: 3:12
    let mut _0: ();                      // return place in scope 0 at cell.rs:3:26: 3:26
    let _2: u32;                         // in scope 0 at cell.rs:4:9: 4:14
    let mut _3: &std::cell::Cell<u32>;   // in scope 0 at cell.rs:4:17: 4:21
    let _4: ();                          // in scope 0 at cell.rs:5:5: 5:24
    let mut _5: &std::cell::Cell<u32>;   // in scope 0 at cell.rs:5:5: 5:9
    let mut _6: u32;                     // in scope 0 at cell.rs:5:14: 5:23
    let mut _7: u32;                     // in scope 0 at cell.rs:5:14: 5:19
    let mut _8: (u32, bool);             // in scope 0 at cell.rs:5:14: 5:23
    scope 1 {
        debug value => _2;               // in scope 1 at cell.rs:4:9: 4:14
    }

    bb0: {
        _3 = _1;                         // scope 0 at cell.rs:4:17: 4:21
        _2 = Cell::<u32>::get(move _3) -> bb1; // scope 0 at cell.rs:4:17: 4:27
                                         // mir::Constant
                                         // + span: cell.rs:4:22: 4:25
                                         // + literal: Const { ty: for<'r> fn(&'r std::cell::Cell<u32>) -> u32 {std::cell::Cell::<u32>::get}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _5 = _1;                         // scope 1 at cell.rs:5:5: 5:9
        _7 = _2;                         // scope 1 at cell.rs:5:14: 5:19
        _8 = CheckedMul(_7, const 2_u32); // scope 1 at cell.rs:5:14: 5:23
        assert(!move (_8.1: bool), "attempt to compute `{} * {}`, which would overflow", move _7, const 2_u32) -> bb2; // scope 1 at cell.rs:5:14: 5:23
    }

    bb2: {
        _6 = move (_8.0: u32);           // scope 1 at cell.rs:5:14: 5:23
        _4 = Cell::<u32>::set(move _5, move _6) -> bb3; // scope 1 at cell.rs:5:5: 5:24
                                         // mir::Constant
                                         // + span: cell.rs:5:10: 5:13
                                         // + literal: Const { ty: for<'r> fn(&'r std::cell::Cell<u32>, u32) {std::cell::Cell::<u32>::set}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at cell.rs:6:2: 6:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at cell.rs:8:10: 8:10
    let _1: std::cell::Cell<u32>;        // in scope 0 at cell.rs:9:9: 9:13
    let mut _3: u32;                     // in scope 0 at cell.rs:10:21: 10:31
    let mut _4: &std::cell::Cell<u32>;   // in scope 0 at cell.rs:10:21: 10:25
    let mut _5: (u32, bool);             // in scope 0 at cell.rs:10:21: 10:36
    let _6: ();                          // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
    let mut _7: std::fmt::Arguments;     // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _8: [std::fmt::ArgumentV1; 1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _9: (&u32,);                 // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _10: &u32;                   // in scope 0 at cell.rs:11:33: 11:43
    let _11: u32;                        // in scope 0 at cell.rs:11:33: 11:43
    let mut _12: &std::cell::Cell<u32>;  // in scope 0 at cell.rs:11:33: 11:37
    let mut _14: std::fmt::ArgumentV1;   // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _15: &u32;                   // in scope 0 at cell.rs:11:33: 11:43
    let mut _16: for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at cell.rs:11:33: 11:43
    let mut _18: &[&str];                // in scope 0 at cell.rs:11:14: 11:31
    let mut _19: &[&str; 2];             // in scope 0 at cell.rs:11:14: 11:31
    let _20: &[&str; 2];                 // in scope 0 at cell.rs:11:14: 11:31
    let mut _21: &[std::fmt::ArgumentV1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _22: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let _23: ();                         // in scope 0 at cell.rs:13:5: 13:15
    let mut _24: &std::cell::Cell<u32>;  // in scope 0 at cell.rs:13:9: 13:14
    let _25: &std::cell::Cell<u32>;      // in scope 0 at cell.rs:13:9: 13:14
    let _26: ();                         // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
    let mut _27: std::fmt::Arguments;    // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _28: [std::fmt::ArgumentV1; 1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _29: (&u32,);                // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _30: &u32;                   // in scope 0 at cell.rs:14:33: 14:43
    let _31: u32;                        // in scope 0 at cell.rs:14:33: 14:43
    let mut _32: &std::cell::Cell<u32>;  // in scope 0 at cell.rs:14:33: 14:37
    let mut _34: std::fmt::ArgumentV1;   // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _35: &u32;                   // in scope 0 at cell.rs:14:33: 14:43
    let mut _36: for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at cell.rs:14:33: 14:43
    let mut _38: &[&str];                // in scope 0 at cell.rs:14:14: 14:31
    let mut _39: &[&str; 2];             // in scope 0 at cell.rs:14:14: 14:31
    let _40: &[&str; 2];                 // in scope 0 at cell.rs:14:14: 14:31
    let mut _41: &[std::fmt::ArgumentV1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _42: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let _43: ();                         // in scope 0 at cell.rs:15:5: 15:24
    let mut _44: &std::cell::Cell<u32>;  // in scope 0 at cell.rs:15:5: 15:9
    let mut _45: u32;                    // in scope 0 at cell.rs:15:14: 15:23
    let _46: ();                         // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
    let mut _47: std::fmt::Arguments;    // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _48: [std::fmt::ArgumentV1; 1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _49: (&u32,);                // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _50: &u32;                   // in scope 0 at cell.rs:17:33: 17:43
    let _51: u32;                        // in scope 0 at cell.rs:17:33: 17:43
    let mut _52: &std::cell::Cell<u32>;  // in scope 0 at cell.rs:17:33: 17:37
    let mut _54: std::fmt::ArgumentV1;   // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _55: &u32;                   // in scope 0 at cell.rs:17:33: 17:43
    let mut _56: for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at cell.rs:17:33: 17:43
    let mut _58: &[&str];                // in scope 0 at cell.rs:17:14: 17:31
    let mut _59: &[&str; 2];             // in scope 0 at cell.rs:17:14: 17:31
    let _60: &[&str; 2];                 // in scope 0 at cell.rs:17:14: 17:31
    let mut _61: &[std::fmt::ArgumentV1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _62: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    scope 1 {
        debug cell => _1;                // in scope 1 at cell.rs:9:9: 9:13
        let _2: u32;                     // in scope 1 at cell.rs:10:9: 10:18
        scope 2 {
            debug new_value => _2;       // in scope 2 at cell.rs:10:9: 10:18
            let _13: &u32;               // in scope 2 at cell.rs:11:33: 11:43
            let _17: &[std::fmt::ArgumentV1; 1]; // in scope 2 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
            let _33: &u32;               // in scope 2 at cell.rs:14:33: 14:43
            let _37: &[std::fmt::ArgumentV1; 1]; // in scope 2 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
            let _53: &u32;               // in scope 2 at cell.rs:17:33: 17:43
            let _57: &[std::fmt::ArgumentV1; 1]; // in scope 2 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
            scope 3 {
                debug arg0 => _13;       // in scope 3 at cell.rs:11:33: 11:43
            }
            scope 4 {
                debug args => _17;       // in scope 4 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                scope 5 {
                    let mut _65: &[&str; 2]; // in scope 5 at cell.rs:11:14: 11:31
                }
            }
            scope 6 {
                debug arg0 => _33;       // in scope 6 at cell.rs:14:33: 14:43
            }
            scope 7 {
                debug args => _37;       // in scope 7 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                scope 8 {
                    let mut _64: &[&str; 2]; // in scope 8 at cell.rs:14:14: 14:31
                }
            }
            scope 9 {
                debug arg0 => _53;       // in scope 9 at cell.rs:17:33: 17:43
            }
            scope 10 {
                debug args => _57;       // in scope 10 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                scope 11 {
                    let mut _63: &[&str; 2]; // in scope 11 at cell.rs:17:14: 17:31
                }
            }
        }
    }

    bb0: {
        _1 = Cell::<u32>::new(const 1_u32) -> bb1; // scope 0 at cell.rs:9:16: 9:28
                                         // mir::Constant
                                         // + span: cell.rs:9:16: 9:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u32) -> std::cell::Cell<u32> {std::cell::Cell::<u32>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = &_1;                        // scope 1 at cell.rs:10:21: 10:25
        _3 = Cell::<u32>::get(move _4) -> bb2; // scope 1 at cell.rs:10:21: 10:31
                                         // mir::Constant
                                         // + span: cell.rs:10:26: 10:29
                                         // + literal: Const { ty: for<'r> fn(&'r std::cell::Cell<u32>) -> u32 {std::cell::Cell::<u32>::get}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _5 = CheckedAdd(_3, const 10_u32); // scope 1 at cell.rs:10:21: 10:36
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 10_u32) -> bb3; // scope 1 at cell.rs:10:21: 10:36
    }

    bb3: {
        _2 = move (_5.0: u32);           // scope 1 at cell.rs:10:21: 10:36
        _12 = &_1;                       // scope 2 at cell.rs:11:33: 11:37
        _11 = Cell::<u32>::get(move _12) -> bb4; // scope 2 at cell.rs:11:33: 11:43
                                         // mir::Constant
                                         // + span: cell.rs:11:38: 11:41
                                         // + literal: Const { ty: for<'r> fn(&'r std::cell::Cell<u32>) -> u32 {std::cell::Cell::<u32>::get}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _10 = &_11;                      // scope 2 at cell.rs:11:33: 11:43
        (_9.0: &u32) = move _10;         // scope 2 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _13 = (_9.0: &u32);              // scope 2 at cell.rs:11:33: 11:43
        _15 = _13;                       // scope 3 at cell.rs:11:33: 11:43
        _16 = <u32 as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 3 at cell.rs:11:33: 11:43
                                         // mir::Constant
                                         // + span: cell.rs:11:33: 11:43
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<u32 as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _14 = ArgumentV1::new::<u32>(move _15, move _16) -> bb5; // scope 3 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u32, for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<u32>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _8 = [move _14];                 // scope 3 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _17 = &_8;                       // scope 2 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _65 = const main::promoted[2];   // scope 5 at cell.rs:11:14: 11:31
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(main, [], Some(promoted[2]))
                                         // mir::Constant
                                         // + span: cell.rs:11:14: 11:31
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ cell[c055]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[2]) }) }
        _20 = _65;                       // scope 5 at cell.rs:11:14: 11:31
        _19 = _20;                       // scope 5 at cell.rs:11:14: 11:31
        _18 = move _19 as &[&str] (Pointer(Unsize)); // scope 5 at cell.rs:11:14: 11:31
        _22 = _17;                       // scope 5 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _21 = move _22 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 5 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _7 = Arguments::new_v1(move _18, move _21) -> bb6; // scope 5 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: unsafe fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _6 = _print(move _7) -> bb7;     // scope 2 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _25 = &_1;                       // scope 2 at cell.rs:13:9: 13:14
        _24 = _25;                       // scope 2 at cell.rs:13:9: 13:14
        _23 = foo(move _24) -> bb8;      // scope 2 at cell.rs:13:5: 13:15
                                         // mir::Constant
                                         // + span: cell.rs:13:5: 13:8
                                         // + literal: Const { ty: for<'r> fn(&'r std::cell::Cell<u32>) {foo}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        _32 = &_1;                       // scope 2 at cell.rs:14:33: 14:37
        _31 = Cell::<u32>::get(move _32) -> bb9; // scope 2 at cell.rs:14:33: 14:43
                                         // mir::Constant
                                         // + span: cell.rs:14:38: 14:41
                                         // + literal: Const { ty: for<'r> fn(&'r std::cell::Cell<u32>) -> u32 {std::cell::Cell::<u32>::get}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        _30 = &_31;                      // scope 2 at cell.rs:14:33: 14:43
        (_29.0: &u32) = move _30;        // scope 2 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _33 = (_29.0: &u32);             // scope 2 at cell.rs:14:33: 14:43
        _35 = _33;                       // scope 6 at cell.rs:14:33: 14:43
        _36 = <u32 as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 6 at cell.rs:14:33: 14:43
                                         // mir::Constant
                                         // + span: cell.rs:14:33: 14:43
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<u32 as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _34 = ArgumentV1::new::<u32>(move _35, move _36) -> bb10; // scope 6 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b u32, for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<u32>}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        _28 = [move _34];                // scope 6 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _37 = &_28;                      // scope 2 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _64 = const main::promoted[1];   // scope 8 at cell.rs:14:14: 14:31
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(main, [], Some(promoted[1]))
                                         // mir::Constant
                                         // + span: cell.rs:14:14: 14:31
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ cell[c055]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[1]) }) }
        _40 = _64;                       // scope 8 at cell.rs:14:14: 14:31
        _39 = _40;                       // scope 8 at cell.rs:14:14: 14:31
        _38 = move _39 as &[&str] (Pointer(Unsize)); // scope 8 at cell.rs:14:14: 14:31
        _42 = _37;                       // scope 8 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _41 = move _42 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 8 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _27 = Arguments::new_v1(move _38, move _41) -> bb11; // scope 8 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: unsafe fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _26 = _print(move _27) -> bb12;  // scope 2 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _44 = &_1;                       // scope 2 at cell.rs:15:5: 15:9
        _45 = _2;                        // scope 2 at cell.rs:15:14: 15:23
        _43 = Cell::<u32>::set(move _44, move _45) -> bb13; // scope 2 at cell.rs:15:5: 15:24
                                         // mir::Constant
                                         // + span: cell.rs:15:10: 15:13
                                         // + literal: Const { ty: for<'r> fn(&'r std::cell::Cell<u32>, u32) {std::cell::Cell::<u32>::set}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _52 = &_1;                       // scope 2 at cell.rs:17:33: 17:37
        _51 = Cell::<u32>::get(move _52) -> bb14; // scope 2 at cell.rs:17:33: 17:43
                                         // mir::Constant
                                         // + span: cell.rs:17:38: 17:41
                                         // + literal: Const { ty: for<'r> fn(&'r std::cell::Cell<u32>) -> u32 {std::cell::Cell::<u32>::get}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        _50 = &_51;                      // scope 2 at cell.rs:17:33: 17:43
        (_49.0: &u32) = move _50;        // scope 2 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _53 = (_49.0: &u32);             // scope 2 at cell.rs:17:33: 17:43
        _55 = _53;                       // scope 9 at cell.rs:17:33: 17:43
        _56 = <u32 as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 9 at cell.rs:17:33: 17:43
                                         // mir::Constant
                                         // + span: cell.rs:17:33: 17:43
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<u32 as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _54 = ArgumentV1::new::<u32>(move _55, move _56) -> bb15; // scope 9 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b u32, for<'r, 's, 't0> fn(&'r u32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<u32>}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        _48 = [move _54];                // scope 9 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _57 = &_48;                      // scope 2 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _63 = const main::promoted[0];   // scope 11 at cell.rs:17:14: 17:31
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(main, [], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: cell.rs:17:14: 17:31
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ cell[c055]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }
        _60 = _63;                       // scope 11 at cell.rs:17:14: 17:31
        _59 = _60;                       // scope 11 at cell.rs:17:14: 17:31
        _58 = move _59 as &[&str] (Pointer(Unsize)); // scope 11 at cell.rs:17:14: 17:31
        _62 = _57;                       // scope 11 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _61 = move _62 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 11 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _47 = Arguments::new_v1(move _58, move _61) -> bb16; // scope 11 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: unsafe fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        _46 = _print(move _47) -> bb17;  // scope 2 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        return;                          // scope 0 at cell.rs:18:2: 18:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cell.rs:17:14: 17:31
    let mut _1: [&str; 2];               // in scope 0 at cell.rs:17:14: 17:31

    bb0: {
        _1 = [const "cell value : ", const "\n"]; // scope 0 at cell.rs:17:14: 17:31
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [99, 101, 108, 108, 32, 118, 97, 108, 117, 101, 32, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: cell.rs:17:14: 17:31
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [99, 101, 108, 108, 32, 118, 97, 108, 117, 101, 32, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: cell.rs:17:14: 17:31
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _0 = &_1;                        // scope 0 at cell.rs:17:14: 17:31
        return;                          // scope 0 at cell.rs:17:14: 17:31
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cell.rs:14:14: 14:31
    let mut _1: [&str; 2];               // in scope 0 at cell.rs:14:14: 14:31

    bb0: {
        _1 = [const "cell value : ", const "\n"]; // scope 0 at cell.rs:14:14: 14:31
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [99, 101, 108, 108, 32, 118, 97, 108, 117, 101, 32, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: cell.rs:14:14: 14:31
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [99, 101, 108, 108, 32, 118, 97, 108, 117, 101, 32, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: cell.rs:14:14: 14:31
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _0 = &_1;                        // scope 0 at cell.rs:14:14: 14:31
        return;                          // scope 0 at cell.rs:14:14: 14:31
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cell.rs:11:14: 11:31
    let mut _1: [&str; 2];               // in scope 0 at cell.rs:11:14: 11:31

    bb0: {
        _1 = [const "cell value : ", const "\n"]; // scope 0 at cell.rs:11:14: 11:31
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [99, 101, 108, 108, 32, 118, 97, 108, 117, 101, 32, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })
                                         // mir::Constant
                                         // + span: cell.rs:11:14: 11:31
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [99, 101, 108, 108, 32, 118, 97, 108, 117, 101, 32, 58, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: cell.rs:11:14: 11:31
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _0 = &_1;                        // scope 0 at cell.rs:11:14: 11:31
        return;                          // scope 0 at cell.rs:11:14: 11:31
    }
}
