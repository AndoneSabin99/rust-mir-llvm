// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn takes_ownership(_1: String) -> () {
    debug some_string => _1;             // in scope 0 at ownership.rs:37:20: 37:31
    let mut _0: ();                      // return place in scope 0 at ownership.rs:37:41: 37:41
    let _2: ();                          // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
    let mut _3: std::fmt::Arguments;     // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _4: [std::fmt::ArgumentV1; 1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _5: (&std::string::String,); // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _6: &std::string::String;    // in scope 0 at ownership.rs:38:20: 38:31
    let _7: &std::string::String;        // in scope 0 at ownership.rs:38:20: 38:31
    let mut _8: std::fmt::ArgumentV1;    // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _9: &std::string::String;    // in scope 0 at ownership.rs:38:20: 38:31
    let mut _10: for<'r, 's, 't0> fn(&'r std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at ownership.rs:38:20: 38:31
    let _11: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _12: &[&str];                // in scope 0 at ownership.rs:38:14: 38:18
    let mut _13: &[&str; 2];             // in scope 0 at ownership.rs:38:14: 38:18
    let _14: &[&str; 2];                 // in scope 0 at ownership.rs:38:14: 38:18
    let mut _15: &[std::fmt::ArgumentV1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _16: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    scope 1 {
        debug arg0 => _7;                // in scope 1 at ownership.rs:38:20: 38:31
    }
    scope 2 {
        debug args => _11;               // in scope 2 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        scope 3 {
            let mut _17: &[&str; 2];     // in scope 3 at ownership.rs:38:14: 38:18
        }
    }

    bb0: {
        _6 = &_1;                        // scope 0 at ownership.rs:38:20: 38:31
        (_5.0: &std::string::String) = move _6; // scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _7 = (_5.0: &std::string::String); // scope 0 at ownership.rs:38:20: 38:31
        _9 = _7;                         // scope 1 at ownership.rs:38:20: 38:31
        _10 = <String as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 1 at ownership.rs:38:20: 38:31
                                         // mir::Constant
                                         // + span: ownership.rs:38:20: 38:31
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<std::string::String as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _8 = ArgumentV1::new::<String>(move _9, move _10) -> [return: bb1, unwind: bb5]; // scope 1 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String, for<'r, 's, 't0> fn(&'r std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = [move _8];                  // scope 1 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _11 = &_4;                       // scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _17 = const takes_ownership::promoted[0]; // scope 3 at ownership.rs:38:14: 38:18
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(takes_ownership, [], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: ownership.rs:38:14: 38:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ ownership[5a2f]::takes_ownership), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }
        _14 = _17;                       // scope 3 at ownership.rs:38:14: 38:18
        _13 = _14;                       // scope 3 at ownership.rs:38:14: 38:18
        _12 = move _13 as &[&str] (Pointer(Unsize)); // scope 3 at ownership.rs:38:14: 38:18
        _16 = _11;                       // scope 3 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _15 = move _16 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 3 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _3 = Arguments::new_v1(move _12, move _15) -> [return: bb2, unwind: bb5]; // scope 3 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind: bb5]; // scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ownership.rs:39:1: 39:2
    }

    bb4: {
        return;                          // scope 0 at ownership.rs:39:2: 39:2
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ownership.rs:39:1: 39:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ownership.rs:37:1: 39:2
    }
}

promoted[0] in takes_ownership: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ownership.rs:38:14: 38:18
    let mut _1: [&str; 2];               // in scope 0 at ownership.rs:38:14: 38:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ownership.rs:38:14: 38:18
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 })
                                         // mir::Constant
                                         // + span: ownership.rs:38:14: 38:18
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: ownership.rs:38:14: 38:18
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _0 = &_1;                        // scope 0 at ownership.rs:38:14: 38:18
        return;                          // scope 0 at ownership.rs:38:14: 38:18
    }
}

fn makes_copy(_1: i32) -> () {
    debug some_integer => _1;            // in scope 0 at ownership.rs:41:15: 41:27
    let mut _0: ();                      // return place in scope 0 at ownership.rs:41:34: 41:34
    let _2: ();                          // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
    let mut _3: std::fmt::Arguments;     // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _4: [std::fmt::ArgumentV1; 1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _5: (&i32,);                 // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _6: &i32;                    // in scope 0 at ownership.rs:42:20: 42:32
    let _7: &i32;                        // in scope 0 at ownership.rs:42:20: 42:32
    let mut _8: std::fmt::ArgumentV1;    // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _9: &i32;                    // in scope 0 at ownership.rs:42:20: 42:32
    let mut _10: for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at ownership.rs:42:20: 42:32
    let _11: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _12: &[&str];                // in scope 0 at ownership.rs:42:14: 42:18
    let mut _13: &[&str; 2];             // in scope 0 at ownership.rs:42:14: 42:18
    let _14: &[&str; 2];                 // in scope 0 at ownership.rs:42:14: 42:18
    let mut _15: &[std::fmt::ArgumentV1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _16: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    scope 1 {
        debug arg0 => _7;                // in scope 1 at ownership.rs:42:20: 42:32
    }
    scope 2 {
        debug args => _11;               // in scope 2 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        scope 3 {
            let mut _17: &[&str; 2];     // in scope 3 at ownership.rs:42:14: 42:18
        }
    }

    bb0: {
        _6 = &_1;                        // scope 0 at ownership.rs:42:20: 42:32
        (_5.0: &i32) = move _6;          // scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _7 = (_5.0: &i32);               // scope 0 at ownership.rs:42:20: 42:32
        _9 = _7;                         // scope 1 at ownership.rs:42:20: 42:32
        _10 = <i32 as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 1 at ownership.rs:42:20: 42:32
                                         // mir::Constant
                                         // + span: ownership.rs:42:20: 42:32
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<i32 as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _8 = ArgumentV1::new::<i32>(move _9, move _10) -> bb1; // scope 1 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b> fn(&'b i32, for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _4 = [move _8];                  // scope 1 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _11 = &_4;                       // scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _17 = const makes_copy::promoted[0]; // scope 3 at ownership.rs:42:14: 42:18
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(makes_copy, [], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: ownership.rs:42:14: 42:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ ownership[5a2f]::makes_copy), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }
        _14 = _17;                       // scope 3 at ownership.rs:42:14: 42:18
        _13 = _14;                       // scope 3 at ownership.rs:42:14: 42:18
        _12 = move _13 as &[&str] (Pointer(Unsize)); // scope 3 at ownership.rs:42:14: 42:18
        _16 = _11;                       // scope 3 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _15 = move _16 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 3 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _3 = Arguments::new_v1(move _12, move _15) -> bb2; // scope 3 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        return;                          // scope 0 at ownership.rs:43:2: 43:2
    }
}

promoted[0] in makes_copy: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ownership.rs:42:14: 42:18
    let mut _1: [&str; 2];               // in scope 0 at ownership.rs:42:14: 42:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ownership.rs:42:14: 42:18
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 })
                                         // mir::Constant
                                         // + span: ownership.rs:42:14: 42:18
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: ownership.rs:42:14: 42:18
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _0 = &_1;                        // scope 0 at ownership.rs:42:14: 42:18
        return;                          // scope 0 at ownership.rs:42:14: 42:18
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ownership.rs:1:10: 1:10
    let _1: std::string::String;         // in scope 0 at ownership.rs:5:13: 5:15
    let _3: std::string::String;         // in scope 0 at ownership.rs:12:13: 12:15
    let mut _5: &std::string::String;    // in scope 0 at ownership.rs:14:18: 14:20
    let _6: ();                          // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
    let mut _7: std::fmt::Arguments;     // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _8: [std::fmt::ArgumentV1; 2]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _9: (&std::string::String, &std::string::String); // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _10: &std::string::String;   // in scope 0 at ownership.rs:15:38: 15:40
    let mut _11: &std::string::String;   // in scope 0 at ownership.rs:15:42: 15:44
    let mut _14: std::fmt::ArgumentV1;   // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _15: &std::string::String;   // in scope 0 at ownership.rs:15:38: 15:40
    let mut _16: for<'r, 's, 't0> fn(&'r std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at ownership.rs:15:38: 15:40
    let mut _17: std::fmt::ArgumentV1;   // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _18: &std::string::String;   // in scope 0 at ownership.rs:15:42: 15:44
    let mut _19: for<'r, 's, 't0> fn(&'r std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at ownership.rs:15:42: 15:44
    let mut _21: &[&str];                // in scope 0 at ownership.rs:15:18: 15:36
    let mut _22: &[&str; 3];             // in scope 0 at ownership.rs:15:18: 15:36
    let _23: &[&str; 3];                 // in scope 0 at ownership.rs:15:18: 15:36
    let mut _24: &[std::fmt::ArgumentV1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _25: &[std::fmt::ArgumentV1; 2]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let _26: i32;                        // in scope 0 at ownership.rs:19:9: 19:10
    let _28: ();                         // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
    let mut _29: std::fmt::Arguments;    // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _30: [std::fmt::ArgumentV1; 2]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _31: (&i32, &i32);           // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _32: &i32;                   // in scope 0 at ownership.rs:21:32: 21:33
    let mut _33: &i32;                   // in scope 0 at ownership.rs:21:35: 21:36
    let mut _36: std::fmt::ArgumentV1;   // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _37: &i32;                   // in scope 0 at ownership.rs:21:32: 21:33
    let mut _38: for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at ownership.rs:21:32: 21:33
    let mut _39: std::fmt::ArgumentV1;   // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _40: &i32;                   // in scope 0 at ownership.rs:21:35: 21:36
    let mut _41: for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at ownership.rs:21:35: 21:36
    let mut _43: &[&str];                // in scope 0 at ownership.rs:21:14: 21:30
    let mut _44: &[&str; 3];             // in scope 0 at ownership.rs:21:14: 21:30
    let _45: &[&str; 3];                 // in scope 0 at ownership.rs:21:14: 21:30
    let mut _46: &[std::fmt::ArgumentV1]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let mut _47: &[std::fmt::ArgumentV1; 2]; // in scope 0 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
    let _49: ();                         // in scope 0 at ownership.rs:28:5: 28:23
    let mut _50: std::string::String;    // in scope 0 at ownership.rs:28:21: 28:22
    let _52: ();                         // in scope 0 at ownership.rs:34:5: 34:18
    let mut _53: i32;                    // in scope 0 at ownership.rs:34:16: 34:17
    scope 1 {
        debug s1 => _1;                  // in scope 1 at ownership.rs:5:13: 5:15
        let _2: std::string::String;     // in scope 1 at ownership.rs:7:13: 7:16
        scope 2 {
            debug _s2 => _2;             // in scope 2 at ownership.rs:7:13: 7:16
        }
    }
    scope 3 {
        debug s1 => _3;                  // in scope 3 at ownership.rs:12:13: 12:15
        let _4: std::string::String;     // in scope 3 at ownership.rs:14:13: 14:15
        scope 4 {
            debug s2 => _4;              // in scope 4 at ownership.rs:14:13: 14:15
            let _12: &std::string::String; // in scope 4 at ownership.rs:15:38: 15:40
            let _13: &std::string::String; // in scope 4 at ownership.rs:15:42: 15:44
            let _20: &[std::fmt::ArgumentV1; 2]; // in scope 4 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
            scope 5 {
                debug arg0 => _12;       // in scope 5 at ownership.rs:15:38: 15:40
                debug arg1 => _13;       // in scope 5 at ownership.rs:15:42: 15:44
            }
            scope 6 {
                debug args => _20;       // in scope 6 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                scope 7 {
                    let mut _55: &[&str; 3]; // in scope 7 at ownership.rs:15:18: 15:36
                }
            }
        }
    }
    scope 8 {
        debug x => _26;                  // in scope 8 at ownership.rs:19:9: 19:10
        let _27: i32;                    // in scope 8 at ownership.rs:20:9: 20:10
        scope 9 {
            debug y => _27;              // in scope 9 at ownership.rs:20:9: 20:10
            let _34: &i32;               // in scope 9 at ownership.rs:21:32: 21:33
            let _35: &i32;               // in scope 9 at ownership.rs:21:35: 21:36
            let _42: &[std::fmt::ArgumentV1; 2]; // in scope 9 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
            let _48: std::string::String; // in scope 9 at ownership.rs:26:9: 26:10
            scope 10 {
                debug arg0 => _34;       // in scope 10 at ownership.rs:21:32: 21:33
                debug arg1 => _35;       // in scope 10 at ownership.rs:21:35: 21:36
            }
            scope 11 {
                debug args => _42;       // in scope 11 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                scope 12 {
                    let mut _54: &[&str; 3]; // in scope 12 at ownership.rs:21:14: 21:30
                }
            }
            scope 13 {
                debug s => _48;          // in scope 13 at ownership.rs:26:9: 26:10
                let _51: i32;            // in scope 13 at ownership.rs:31:9: 31:10
                scope 14 {
                    debug x => _51;      // in scope 14 at ownership.rs:31:9: 31:10
                }
            }
        }
    }

    bb0: {
        _1 = <String as From<&str>>::from(const "hello") -> bb1; // scope 0 at ownership.rs:5:18: 5:39
                                         // mir::Constant
                                         // + span: ownership.rs:5:18: 5:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> std::string::String {<std::string::String as std::convert::From<&str>>::from}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: ownership.rs:5:31: 5:38
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
    }

    bb1: {
        _2 = move _1;                    // scope 1 at ownership.rs:7:19: 7:21
        drop(_2) -> bb2;                 // scope 1 at ownership.rs:8:5: 8:6
    }

    bb2: {
        _3 = <String as From<&str>>::from(const "hello") -> bb3; // scope 0 at ownership.rs:12:18: 12:39
                                         // mir::Constant
                                         // + span: ownership.rs:12:18: 12:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&str) -> std::string::String {<std::string::String as std::convert::From<&str>>::from}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: ownership.rs:12:31: 12:38
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
    }

    bb3: {
        _5 = &_3;                        // scope 3 at ownership.rs:14:18: 14:20
        _4 = <String as Clone>::clone(move _5) -> [return: bb4, unwind: bb19]; // scope 3 at ownership.rs:14:18: 14:28
                                         // mir::Constant
                                         // + span: ownership.rs:14:21: 14:26
                                         // + literal: Const { ty: for<'r> fn(&'r std::string::String) -> std::string::String {<std::string::String as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _10 = &_3;                       // scope 4 at ownership.rs:15:38: 15:40
        _11 = &_4;                       // scope 4 at ownership.rs:15:42: 15:44
        (_9.0: &std::string::String) = move _10; // scope 4 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        (_9.1: &std::string::String) = move _11; // scope 4 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _12 = (_9.0: &std::string::String); // scope 4 at ownership.rs:15:38: 15:40
        _13 = (_9.1: &std::string::String); // scope 4 at ownership.rs:15:42: 15:44
        _15 = _12;                       // scope 5 at ownership.rs:15:38: 15:40
        _16 = <String as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at ownership.rs:15:38: 15:40
                                         // mir::Constant
                                         // + span: ownership.rs:15:38: 15:40
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<std::string::String as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _14 = ArgumentV1::new::<String>(move _15, move _16) -> [return: bb5, unwind: bb18]; // scope 5 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String, for<'r, 's, 't0> fn(&'r std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        _18 = _13;                       // scope 5 at ownership.rs:15:42: 15:44
        _19 = <String as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at ownership.rs:15:42: 15:44
                                         // mir::Constant
                                         // + span: ownership.rs:15:42: 15:44
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<std::string::String as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _17 = ArgumentV1::new::<String>(move _18, move _19) -> [return: bb6, unwind: bb18]; // scope 5 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String, for<'r, 's, 't0> fn(&'r std::string::String, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<std::string::String>}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        _8 = [move _14, move _17];       // scope 5 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _20 = &_8;                       // scope 4 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _55 = const main::promoted[1];   // scope 7 at ownership.rs:15:18: 15:36
                                         // ty::Const
                                         // + ty: &[&str; 3]
                                         // + val: Unevaluated(main, [], Some(promoted[1]))
                                         // mir::Constant
                                         // + span: ownership.rs:15:18: 15:36
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ownership[5a2f]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[1]) }) }
        _23 = _55;                       // scope 7 at ownership.rs:15:18: 15:36
        _22 = _23;                       // scope 7 at ownership.rs:15:18: 15:36
        _21 = move _22 as &[&str] (Pointer(Unsize)); // scope 7 at ownership.rs:15:18: 15:36
        _25 = _20;                       // scope 7 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _24 = move _25 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 7 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _7 = Arguments::new_v1(move _21, move _24) -> [return: bb7, unwind: bb18]; // scope 7 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: unsafe fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb7: {
        _6 = _print(move _7) -> [return: bb8, unwind: bb18]; // scope 4 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        drop(_4) -> [return: bb9, unwind: bb19]; // scope 3 at ownership.rs:16:5: 16:6
    }

    bb9: {
        drop(_3) -> bb10;                // scope 0 at ownership.rs:16:5: 16:6
    }

    bb10: {
        _26 = const 5_i32;               // scope 0 at ownership.rs:19:18: 19:19
        _27 = _26;                       // scope 8 at ownership.rs:20:13: 20:14
        _32 = &_26;                      // scope 9 at ownership.rs:21:32: 21:33
        _33 = &_27;                      // scope 9 at ownership.rs:21:35: 21:36
        (_31.0: &i32) = move _32;        // scope 9 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        (_31.1: &i32) = move _33;        // scope 9 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _34 = (_31.0: &i32);             // scope 9 at ownership.rs:21:32: 21:33
        _35 = (_31.1: &i32);             // scope 9 at ownership.rs:21:35: 21:36
        _37 = _34;                       // scope 10 at ownership.rs:21:32: 21:33
        _38 = <i32 as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 10 at ownership.rs:21:32: 21:33
                                         // mir::Constant
                                         // + span: ownership.rs:21:32: 21:33
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<i32 as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _36 = ArgumentV1::new::<i32>(move _37, move _38) -> bb11; // scope 10 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b i32, for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        _40 = _35;                       // scope 10 at ownership.rs:21:35: 21:36
        _41 = <i32 as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 10 at ownership.rs:21:35: 21:36
                                         // mir::Constant
                                         // + span: ownership.rs:21:35: 21:36
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<i32 as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _39 = ArgumentV1::new::<i32>(move _40, move _41) -> bb12; // scope 10 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'b> fn(&'b i32, for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _30 = [move _36, move _39];      // scope 10 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _42 = &_30;                      // scope 9 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _54 = const main::promoted[0];   // scope 12 at ownership.rs:21:14: 21:30
                                         // ty::Const
                                         // + ty: &[&str; 3]
                                         // + val: Unevaluated(main, [], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: ownership.rs:21:14: 21:30
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ownership[5a2f]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }
        _45 = _54;                       // scope 12 at ownership.rs:21:14: 21:30
        _44 = _45;                       // scope 12 at ownership.rs:21:14: 21:30
        _43 = move _44 as &[&str] (Pointer(Unsize)); // scope 12 at ownership.rs:21:14: 21:30
        _47 = _42;                       // scope 12 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _46 = move _47 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 12 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
        _29 = Arguments::new_v1(move _43, move _46) -> bb13; // scope 12 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: unsafe fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        _28 = _print(move _29) -> bb14;  // scope 9 at /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:62
                                         // mir::Constant
                                         // + span: /home/sabin/cheri/rust/library/std/src/macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        _48 = <String as From<&str>>::from(const "hello") -> bb15; // scope 9 at ownership.rs:26:13: 26:34
                                         // mir::Constant
                                         // + span: ownership.rs:26:13: 26:25
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(&str) -> std::string::String {<std::string::String as std::convert::From<&str>>::from}, val: Value(Scalar(<ZST>)) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: ownership.rs:26:26: 26:33
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
    }

    bb15: {
        _50 = move _48;                  // scope 13 at ownership.rs:28:21: 28:22
        _49 = takes_ownership(move _50) -> bb16; // scope 13 at ownership.rs:28:5: 28:23
                                         // mir::Constant
                                         // + span: ownership.rs:28:5: 28:20
                                         // + literal: Const { ty: fn(std::string::String) {takes_ownership}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        _51 = const 5_i32;               // scope 13 at ownership.rs:31:13: 31:14
        _53 = const 5_i32;               // scope 14 at ownership.rs:34:16: 34:17
        _52 = makes_copy(move _53) -> bb17; // scope 14 at ownership.rs:34:5: 34:18
                                         // mir::Constant
                                         // + span: ownership.rs:34:5: 34:15
                                         // + literal: Const { ty: fn(i32) {makes_copy}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        return;                          // scope 0 at ownership.rs:35:2: 35:2
    }

    bb18 (cleanup): {
        drop(_4) -> bb19;                // scope 3 at ownership.rs:16:5: 16:6
    }

    bb19 (cleanup): {
        drop(_3) -> bb20;                // scope 0 at ownership.rs:16:5: 16:6
    }

    bb20 (cleanup): {
        resume;                          // scope 0 at ownership.rs:1:1: 35:2
    }
}

promoted[0] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ownership.rs:21:14: 21:30
    let mut _1: [&str; 3];               // in scope 0 at ownership.rs:21:14: 21:30

    bb0: {
        _1 = [const "x = ", const ", y = ", const "\n"]; // scope 0 at ownership.rs:21:14: 21:30
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [120, 32, 61, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 })
                                         // mir::Constant
                                         // + span: ownership.rs:21:14: 21:30
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [120, 32, 61, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [15], len: Size { raw: 4 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 4 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [44, 32, 121, 32, 61, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 })
                                         // mir::Constant
                                         // + span: ownership.rs:21:14: 21:30
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [44, 32, 121, 32, 61, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [63], len: Size { raw: 6 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 6 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: ownership.rs:21:14: 21:30
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _0 = &_1;                        // scope 0 at ownership.rs:21:14: 21:30
        return;                          // scope 0 at ownership.rs:21:14: 21:30
    }
}

promoted[1] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ownership.rs:15:18: 15:36
    let mut _1: [&str; 3];               // in scope 0 at ownership.rs:15:18: 15:36

    bb0: {
        _1 = [const "s1 = ", const ", s2 = ", const "\n"]; // scope 0 at ownership.rs:15:18: 15:36
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [115, 49, 32, 61, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 })
                                         // mir::Constant
                                         // + span: ownership.rs:15:18: 15:36
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [115, 49, 32, 61, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 5 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 5 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [44, 32, 115, 50, 32, 61, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 })
                                         // mir::Constant
                                         // + span: ownership.rs:15:18: 15:36
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [44, 32, 115, 50, 32, 61, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [127], len: Size { raw: 7 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 7 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: ownership.rs:15:18: 15:36
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _0 = &_1;                        // scope 0 at ownership.rs:15:18: 15:36
        return;                          // scope 0 at ownership.rs:15:18: 15:36
    }
}
