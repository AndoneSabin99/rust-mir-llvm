digraph __crate__ {
subgraph cluster_Mir_0_4 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn takes_ownership(_1: std::string::String) -&gt; ()<br align="left"/>let _2: ();<br align="left"/>let mut _3: std::fmt::Arguments;<br align="left"/>let mut _4: [std::fmt::ArgumentV1; 1];<br align="left"/>let mut _5: (&amp;std::string::String,);<br align="left"/>let mut _6: &amp;std::string::String;<br align="left"/>let _7: &amp;std::string::String;<br align="left"/>let mut _8: std::fmt::ArgumentV1;<br align="left"/>let mut _9: &amp;std::string::String;<br align="left"/>let mut _10: for&lt;'r, 's, 't0&gt; fn(&amp;'r std::string::String, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;;<br align="left"/>let _11: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let mut _12: &amp;[&amp;str];<br align="left"/>let mut _13: &amp;[&amp;str; 2];<br align="left"/>let _14: &amp;[&amp;str; 2];<br align="left"/>let mut _15: &amp;[std::fmt::ArgumentV1];<br align="left"/>let mut _16: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let mut _17: &amp;[&amp;str; 2];<br align="left"/>debug some_string =&gt; _1;<br align="left"/>debug arg0 =&gt; _7;<br align="left"/>debug args =&gt; _11;<br align="left"/>>;
    bb0__0_4 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_6 = &amp;_1<br/>(_5.0: &amp;std::string::String) = move _6<br/>_7 = (_5.0: &amp;std::string::String)<br/>_9 = _7<br/>_10 = &lt;String as std::fmt::Display&gt;::fmt as for&lt;'r, 's, 't0&gt; fn(&amp;'r std::string::String, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))<br/></td></tr><tr><td align="left">_8 = ArgumentV1::new::&lt;String&gt;(move _9, move _10)</td></tr></table>>];
    bb1__0_4 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_4 = [move _8]<br/>_11 = &amp;_4<br/>_17 = const takes_ownership::promoted[0]<br/>_14 = _17<br/>_13 = _14<br/>_12 = move _13 as &amp;[&amp;str] (Pointer(Unsize))<br/>_16 = _11<br/>_15 = move _16 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_3 = Arguments::new_v1(move _12, move _15)</td></tr></table>>];
    bb2__0_4 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">_2 = _print(move _3)</td></tr></table>>];
    bb3__0_4 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">drop(_1)</td></tr></table>>];
    bb4__0_4 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">return</td></tr></table>>];
    bb5__0_4 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">5 (cleanup)</td></tr><tr><td align="left">drop(_1)</td></tr></table>>];
    bb6__0_4 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">6 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_4 -> bb1__0_4 [label="return"];
    bb0__0_4 -> bb5__0_4 [label="unwind"];
    bb1__0_4 -> bb2__0_4 [label="return"];
    bb1__0_4 -> bb5__0_4 [label="unwind"];
    bb2__0_4 -> bb3__0_4 [label="return"];
    bb2__0_4 -> bb5__0_4 [label="unwind"];
    bb3__0_4 -> bb4__0_4 [label="return"];
    bb5__0_4 -> bb6__0_4 [label="return"];
}
subgraph cluster_Mir_0_5 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn makes_copy(_1: i32) -&gt; ()<br align="left"/>let _2: ();<br align="left"/>let mut _3: std::fmt::Arguments;<br align="left"/>let mut _4: [std::fmt::ArgumentV1; 1];<br align="left"/>let mut _5: (&amp;i32,);<br align="left"/>let mut _6: &amp;i32;<br align="left"/>let _7: &amp;i32;<br align="left"/>let mut _8: std::fmt::ArgumentV1;<br align="left"/>let mut _9: &amp;i32;<br align="left"/>let mut _10: for&lt;'r, 's, 't0&gt; fn(&amp;'r i32, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;;<br align="left"/>let _11: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let mut _12: &amp;[&amp;str];<br align="left"/>let mut _13: &amp;[&amp;str; 2];<br align="left"/>let _14: &amp;[&amp;str; 2];<br align="left"/>let mut _15: &amp;[std::fmt::ArgumentV1];<br align="left"/>let mut _16: &amp;[std::fmt::ArgumentV1; 1];<br align="left"/>let mut _17: &amp;[&amp;str; 2];<br align="left"/>debug some_integer =&gt; _1;<br align="left"/>debug arg0 =&gt; _7;<br align="left"/>debug args =&gt; _11;<br align="left"/>>;
    bb0__0_5 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_6 = &amp;_1<br/>(_5.0: &amp;i32) = move _6<br/>_7 = (_5.0: &amp;i32)<br/>_9 = _7<br/>_10 = &lt;i32 as std::fmt::Display&gt;::fmt as for&lt;'r, 's, 't0&gt; fn(&amp;'r i32, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))<br/></td></tr><tr><td align="left">_8 = ArgumentV1::new::&lt;i32&gt;(move _9, move _10)</td></tr></table>>];
    bb1__0_5 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_4 = [move _8]<br/>_11 = &amp;_4<br/>_17 = const makes_copy::promoted[0]<br/>_14 = _17<br/>_13 = _14<br/>_12 = move _13 as &amp;[&amp;str] (Pointer(Unsize))<br/>_16 = _11<br/>_15 = move _16 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_3 = Arguments::new_v1(move _12, move _15)</td></tr></table>>];
    bb2__0_5 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">_2 = _print(move _3)</td></tr></table>>];
    bb3__0_5 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_5 -> bb1__0_5 [label="return"];
    bb1__0_5 -> bb2__0_5 [label="return"];
    bb2__0_5 -> bb3__0_5 [label="return"];
}
subgraph cluster_Mir_0_3 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn main() -&gt; ()<br align="left"/>let _1: std::string::String;<br align="left"/>let _2: std::string::String;<br align="left"/>let _3: std::string::String;<br align="left"/>let _4: std::string::String;<br align="left"/>let mut _5: &amp;std::string::String;<br align="left"/>let _6: ();<br align="left"/>let mut _7: std::fmt::Arguments;<br align="left"/>let mut _8: [std::fmt::ArgumentV1; 2];<br align="left"/>let mut _9: (&amp;std::string::String, &amp;std::string::String);<br align="left"/>let mut _10: &amp;std::string::String;<br align="left"/>let mut _11: &amp;std::string::String;<br align="left"/>let _12: &amp;std::string::String;<br align="left"/>let _13: &amp;std::string::String;<br align="left"/>let mut _14: std::fmt::ArgumentV1;<br align="left"/>let mut _15: &amp;std::string::String;<br align="left"/>let mut _16: for&lt;'r, 's, 't0&gt; fn(&amp;'r std::string::String, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;;<br align="left"/>let mut _17: std::fmt::ArgumentV1;<br align="left"/>let mut _18: &amp;std::string::String;<br align="left"/>let mut _19: for&lt;'r, 's, 't0&gt; fn(&amp;'r std::string::String, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;;<br align="left"/>let _20: &amp;[std::fmt::ArgumentV1; 2];<br align="left"/>let mut _21: &amp;[&amp;str];<br align="left"/>let mut _22: &amp;[&amp;str; 3];<br align="left"/>let _23: &amp;[&amp;str; 3];<br align="left"/>let mut _24: &amp;[std::fmt::ArgumentV1];<br align="left"/>let mut _25: &amp;[std::fmt::ArgumentV1; 2];<br align="left"/>let _26: i32;<br align="left"/>let _27: i32;<br align="left"/>let _28: ();<br align="left"/>let mut _29: std::fmt::Arguments;<br align="left"/>let mut _30: [std::fmt::ArgumentV1; 2];<br align="left"/>let mut _31: (&amp;i32, &amp;i32);<br align="left"/>let mut _32: &amp;i32;<br align="left"/>let mut _33: &amp;i32;<br align="left"/>let _34: &amp;i32;<br align="left"/>let _35: &amp;i32;<br align="left"/>let mut _36: std::fmt::ArgumentV1;<br align="left"/>let mut _37: &amp;i32;<br align="left"/>let mut _38: for&lt;'r, 's, 't0&gt; fn(&amp;'r i32, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;;<br align="left"/>let mut _39: std::fmt::ArgumentV1;<br align="left"/>let mut _40: &amp;i32;<br align="left"/>let mut _41: for&lt;'r, 's, 't0&gt; fn(&amp;'r i32, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;;<br align="left"/>let _42: &amp;[std::fmt::ArgumentV1; 2];<br align="left"/>let mut _43: &amp;[&amp;str];<br align="left"/>let mut _44: &amp;[&amp;str; 3];<br align="left"/>let _45: &amp;[&amp;str; 3];<br align="left"/>let mut _46: &amp;[std::fmt::ArgumentV1];<br align="left"/>let mut _47: &amp;[std::fmt::ArgumentV1; 2];<br align="left"/>let _48: std::string::String;<br align="left"/>let _49: ();<br align="left"/>let mut _50: std::string::String;<br align="left"/>let _51: i32;<br align="left"/>let _52: ();<br align="left"/>let mut _53: i32;<br align="left"/>let mut _54: &amp;[&amp;str; 3];<br align="left"/>let mut _55: &amp;[&amp;str; 3];<br align="left"/>debug s1 =&gt; _1;<br align="left"/>debug _s2 =&gt; _2;<br align="left"/>debug s1 =&gt; _3;<br align="left"/>debug s2 =&gt; _4;<br align="left"/>debug arg0 =&gt; _12;<br align="left"/>debug arg1 =&gt; _13;<br align="left"/>debug args =&gt; _20;<br align="left"/>debug x =&gt; _26;<br align="left"/>debug y =&gt; _27;<br align="left"/>debug arg0 =&gt; _34;<br align="left"/>debug arg1 =&gt; _35;<br align="left"/>debug args =&gt; _42;<br align="left"/>debug s =&gt; _48;<br align="left"/>debug x =&gt; _51;<br align="left"/>>;
    bb0__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_1 = &lt;String as From&lt;&amp;str&gt;&gt;::from(const &quot;hello&quot;)</td></tr></table>>];
    bb1__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_2 = move _1<br/></td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb2__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">_3 = &lt;String as From&lt;&amp;str&gt;&gt;::from(const &quot;hello&quot;)</td></tr></table>>];
    bb3__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_5 = &amp;_3<br/></td></tr><tr><td align="left">_4 = &lt;String as Clone&gt;::clone(move _5)</td></tr></table>>];
    bb4__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_10 = &amp;_3<br/>_11 = &amp;_4<br/>(_9.0: &amp;std::string::String) = move _10<br/>(_9.1: &amp;std::string::String) = move _11<br/>_12 = (_9.0: &amp;std::string::String)<br/>_13 = (_9.1: &amp;std::string::String)<br/>_15 = _12<br/>_16 = &lt;String as std::fmt::Display&gt;::fmt as for&lt;'r, 's, 't0&gt; fn(&amp;'r std::string::String, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))<br/></td></tr><tr><td align="left">_14 = ArgumentV1::new::&lt;String&gt;(move _15, move _16)</td></tr></table>>];
    bb5__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_18 = _13<br/>_19 = &lt;String as std::fmt::Display&gt;::fmt as for&lt;'r, 's, 't0&gt; fn(&amp;'r std::string::String, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))<br/></td></tr><tr><td align="left">_17 = ArgumentV1::new::&lt;String&gt;(move _18, move _19)</td></tr></table>>];
    bb6__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_8 = [move _14, move _17]<br/>_20 = &amp;_8<br/>_55 = const main::promoted[1]<br/>_23 = _55<br/>_22 = _23<br/>_21 = move _22 as &amp;[&amp;str] (Pointer(Unsize))<br/>_25 = _20<br/>_24 = move _25 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_7 = Arguments::new_v1(move _21, move _24)</td></tr></table>>];
    bb7__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">_6 = _print(move _7)</td></tr></table>>];
    bb8__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">drop(_4)</td></tr></table>>];
    bb9__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb10__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_26 = const 5_i32<br/>_27 = _26<br/>_32 = &amp;_26<br/>_33 = &amp;_27<br/>(_31.0: &amp;i32) = move _32<br/>(_31.1: &amp;i32) = move _33<br/>_34 = (_31.0: &amp;i32)<br/>_35 = (_31.1: &amp;i32)<br/>_37 = _34<br/>_38 = &lt;i32 as std::fmt::Display&gt;::fmt as for&lt;'r, 's, 't0&gt; fn(&amp;'r i32, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))<br/></td></tr><tr><td align="left">_36 = ArgumentV1::new::&lt;i32&gt;(move _37, move _38)</td></tr></table>>];
    bb11__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_40 = _35<br/>_41 = &lt;i32 as std::fmt::Display&gt;::fmt as for&lt;'r, 's, 't0&gt; fn(&amp;'r i32, &amp;'s mut std::fmt::Formatter&lt;'t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))<br/></td></tr><tr><td align="left">_39 = ArgumentV1::new::&lt;i32&gt;(move _40, move _41)</td></tr></table>>];
    bb12__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_30 = [move _36, move _39]<br/>_42 = &amp;_30<br/>_54 = const main::promoted[0]<br/>_45 = _54<br/>_44 = _45<br/>_43 = move _44 as &amp;[&amp;str] (Pointer(Unsize))<br/>_47 = _42<br/>_46 = move _47 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))<br/></td></tr><tr><td align="left">_29 = Arguments::new_v1(move _43, move _46)</td></tr></table>>];
    bb13__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">_28 = _print(move _29)</td></tr></table>>];
    bb14__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left">_48 = &lt;String as From&lt;&amp;str&gt;&gt;::from(const &quot;hello&quot;)</td></tr></table>>];
    bb15__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_50 = move _48<br/></td></tr><tr><td align="left">_49 = takes_ownership(move _50)</td></tr></table>>];
    bb16__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_51 = const 5_i32<br/>_53 = const 5_i32<br/></td></tr><tr><td align="left">_52 = makes_copy(move _53)</td></tr></table>>];
    bb17__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left">return</td></tr></table>>];
    bb18__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">18 (cleanup)</td></tr><tr><td align="left">drop(_4)</td></tr></table>>];
    bb19__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">19 (cleanup)</td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb20__0_3 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">20 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_3 -> bb1__0_3 [label="return"];
    bb1__0_3 -> bb2__0_3 [label="return"];
    bb2__0_3 -> bb3__0_3 [label="return"];
    bb3__0_3 -> bb4__0_3 [label="return"];
    bb3__0_3 -> bb19__0_3 [label="unwind"];
    bb4__0_3 -> bb5__0_3 [label="return"];
    bb4__0_3 -> bb18__0_3 [label="unwind"];
    bb5__0_3 -> bb6__0_3 [label="return"];
    bb5__0_3 -> bb18__0_3 [label="unwind"];
    bb6__0_3 -> bb7__0_3 [label="return"];
    bb6__0_3 -> bb18__0_3 [label="unwind"];
    bb7__0_3 -> bb8__0_3 [label="return"];
    bb7__0_3 -> bb18__0_3 [label="unwind"];
    bb8__0_3 -> bb9__0_3 [label="return"];
    bb8__0_3 -> bb19__0_3 [label="unwind"];
    bb9__0_3 -> bb10__0_3 [label="return"];
    bb10__0_3 -> bb11__0_3 [label="return"];
    bb11__0_3 -> bb12__0_3 [label="return"];
    bb12__0_3 -> bb13__0_3 [label="return"];
    bb13__0_3 -> bb14__0_3 [label="return"];
    bb14__0_3 -> bb15__0_3 [label="return"];
    bb15__0_3 -> bb16__0_3 [label="return"];
    bb16__0_3 -> bb17__0_3 [label="return"];
    bb18__0_3 -> bb19__0_3 [label="return"];
    bb19__0_3 -> bb20__0_3 [label="return"];
}
}
